[{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"introduction-to-vivid","dir":"Articles","previous_headings":"Section 1: Introduction","what":"Introduction to vivid","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Variable importance (VImp), variable interaction measures (VInt) partial dependence plots (PDPs) important summaries interpretation statistical machine learning models. vignette describe new visualization techniques exploring model summaries. construct heatmap graph-based displays showing variable importance interaction jointly, carefully designed highlight important aspects fit. describe new matrix-type layout showing single bivariate partial dependence plots, alternative layout based graph Eulerians focusing key subsets. new visualisations model-agnostic applicable regression classification supervised learning settings. enhance interpretation even situations number variables large interaction structure complex. R package vivid (variable importance variable interaction displays) provides implementation. referring VImp VInt together, use shorthand VIVI. information related visualising variable importance interactions machine learning models see published work[1].","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"install-instructions","dir":"Articles","previous_headings":"Section 1: Introduction","what":"Install instructions","title":"vivid: Variable Importance and Variable Interaction Displays","text":"plots used vivid built upon zenplots package requires graph package BioConductor. install graph zenplots packages use: (!requireNamespace(\"graph\", quietly = TRUE)){ install.packages(\"BiocManager\") BiocManager::install(\"graph\")} install.packages(\"zenplots\") Now can install vivid using: install.packages(\"vivid\") Alternatively can install latest development version package R commands: (!require(remotes)) install.packages('remotes') remotes::install_github('AlanInglis/vividPackage') load vivid package via:","code":"library(vivid)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-2-background","dir":"Articles","previous_headings":"","what":"Section 2: Background","title":"vivid: Variable Importance and Variable Interaction Displays","text":"VIVI metrics can categorized two types: model-specific (embedded) model-agnostic. provide brief background variable importance, variable interactions, partial dependence discuss use vivid.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"variable-importance","dir":"Articles","previous_headings":"Section 2: Background","what":"Variable Importance","title":"vivid: Variable Importance and Variable Interaction Displays","text":"importance value variable measures extent impacts model’s output. Embedded methods weave variable importance directly machine learning algorithm. instance, machine learning methods like random forests (RF)[2] gradient boosting machines (GBM)[3] utilize tree-based architecture evaluate performance model. Similarly, Bayesian additive regression tree models (BART)[4] adopt embedded approach yield VIVI metrics measuring proportion splitting rules individual paired variables trees. package randomForestExplainer[5] offers toolkit deciphering inner workings random forest. applies minimal depth concept[6] gauge significance interaction strength observing variable’s location within trees. Moreover, varImp package[7] facilitates computation importance scores party package’s conditional inference random forest[8]. gradient boosted machines, EIX[9] package can used calculate VIVI, graphically represent findings. Model-agnostic techniques universally applicable ML algorithm. methods offer flexibility model choice valuable comparing various ML models. Permutation importance[2], model-agnostic method, assesses VImps computing change model’s predictive accuracy permuting variable. approach available iml[10], flashlight[11], DALEX[12], vip[13] packages. vivid provide functionality calculate either agnostic model-specific importance. calculate agnostic importance, vivid uses permutation approach[14]. approach, model’s error score (e.g., root mean square error) first determined. Afterward, feature randomly permuted, error score computed . change performance indicates importance score particular feature. permutation algorithm can described following: Permutation Importance Algorithm: Input: Fitted predicted model \\(m\\), dataset \\(D\\) Compute: Compute error score \\(w_{k}\\) fitted model \\(m\\) data \\(D\\). feature \\(k\\) (column \\(D\\)) Randomly shuffle column \\(k\\) dataset \\(D\\) generate shuffled version data. Compute score \\({w}^*_{r,k}\\) model \\(m\\) shuffled data. Compute importance \\(\\texttt{imp}_k\\) feature \\(f_k\\) defined : \\[\\begin{equation}   \\tag{1}   \\texttt{imp}_k = w_{k} - \\frac{1}{R}\\sum_{r = 1}^Rw^*_{rk}   \\end{equation}\\] model-specific variable importance, provide individual methods access importance scores popular model fitting R packages, namely; ranger[15], mlr[16], mlr3[17], parsnip[18]. See Section Model Fits details using different models vivid.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"partial-dependence","dir":"Articles","previous_headings":"Section 2: Background","what":"Partial Dependence","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Friedman (2000)[19] introduced Partial Dependence Plots (PDPs) model-agnostic method visualize relationship chosen predictor model outcome, averaging effects predictors. Individual Conditional Expectation (ICE) curves, introduced Goldstein et al. (2015)[20], depict relationship specific predictor model outcome setting predictors certain observation levels. Essentially, PDPs represent averaged outcome ICE curves dataset. iml, DALEX, flashlight, pdp[21] R packages offer PDP functionalities, ICEbox package[20] caters ICE curves variations. partial dependence model fit function \\(g\\) predictor variables \\(S\\) (\\(S\\) subset \\(p\\) predictor variables) estimated : \\[\\begin{equation} \\tag{2} f_S(\\mathbf{x}_S)=\\frac{1}{n}\\sum^n_{=1}g(\\mathbf{x}_s,\\mathbf{x}_{C_i}) \\end{equation}\\] \\(C\\) denotes predictors \\(S\\), \\({x_{C_1},x_{C_2},...,x_{C_n}}\\) values \\(x_C\\) occurring training set n observations, \\(g()\\) gives predictions machine learning model. one two variables, partial dependence functions \\(f_S(\\mathbf{x}_S)\\) plotted (-called PDP) display marginal fits.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"variable-interactions","dir":"Articles","previous_headings":"Section 2: Background","what":"Variable Interactions","title":"vivid: Variable Importance and Variable Interaction Displays","text":"VInts, H-statistic Friedman Popescu (2008)[22] model-agnostic measure gauges interactions using partial dependence. contrasts joint effects variable pair sum marginal effects.. implemented iml flashlight packages defined : \\[\\begin{equation} \\tag{3} H^2_{jk}=\\frac{\\sum^n_{=1}[f_{jk}(x_{ij},x_{ik})-f_j(x_{ij})-f_k(x_{ik})]^2}{\\sum^n_{=1}f^2_{jk}(x_{ij},x_{ik})} \\end{equation}\\] However, denominator Equation 2 small, partial dependence variables \\(j\\) \\(k\\) remains constant. result, minor variations numerator can produce spuriously high \\(H\\)-values. Consequently, vivid use unnormalized \\(H\\)-Statistic calculate pair-wise interaction strength. unnormalized version \\(H\\)-statistic chosen direct comparison interaction effects across pairs variables reducing identification spurious interactions gives results \\(H\\) scale response (regression). \\[\\begin{equation} \\tag{4} H_{jk}=\\sqrt{\\frac{1}{n}\\sum^n_{=1}[f_{jk}(x_{ij},x_{ik})-f_j(x_{ij})-f_k(x_{ik})]^2} \\end{equation}\\]","code":""},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"data-used-in-this-vignette","dir":"Articles","previous_headings":"Section 3: Data and Model","what":"Data used in this vignette","title":"vivid: Variable Importance and Variable Interaction Displays","text":"data used following examples simulated Friedman benchmark problem[23]. benchmark problem commonly used testing purposes. output created according equation: \\[\\begin{equation} \\tag{5} y = 10 sin(π x_1 x_2) + 20 (x_3 - 0.5)^2 + 10 x_4 + 5 x_5 + e \\end{equation}\\] following examples set number features equal 9 number samples set 350 fit randomForest random forest model \\(y\\) response. features \\(x_1\\) \\(x_5\\) variables model, therefore \\(x_6\\) \\(x_{9}\\) noise variables. can seen equation, interaction \\(x_1\\) \\(x_2\\) Create data:","code":"set.seed(101) genFriedman <- function(noFeatures = 10, noSamples = 100, sigma = 1) {      # Create dataframe with named columns   df <- setNames(as.data.frame(matrix(runif(noSamples * noFeatures, 0, 1), nrow = noSamples),                                 stringsAsFactors = FALSE),                   paste0(\"x\", 1:noFeatures))      # Equation: y = 10sin(πx1x2) + 20(x3−0.5)^2 + 10x4 + 5x5 + ε      df$y <- 10 * sin(pi * df$x1 * df$x2) +      20 * (df$x3 - 0.5)^2 +      10 * df$x4 +      5 * df$x5 +      rnorm(noSamples, sd = sigma) # error      return(df) }  myData <- genFriedman(noFeatures = 9, noSamples = 350, sigma = 1)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"model-fit","dir":"Articles","previous_headings":"Section 3: Data and Model","what":"Model Fit","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Part intention behind vivid create package facilitated ease use coupled flexibility use agnostic VIVI methods wide range machine learning (ML) models. Section Model Fits provides practical examples use vivid popular ML algorithms. brevity, following examples, create random forest fit randomForest package use vivid.","code":"library(randomForest) # for model fit set.seed(1701) rf <- randomForest(y ~ ., data = myData)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"vivi-function","dir":"Articles","previous_headings":"Section 4: vivi","what":"vivi function","title":"vivid: Variable Importance and Variable Interaction Displays","text":"vivi function calculates importance interactions using S3 methods. default, agnostic importance interaction scores vivid computed using generalized predict function condvis2 package. Consequently, vivid can used ---box model type works condvis2 predict (see CVpredict condvis2 full list compatible model types). allow vivid run model fits, custom predict function must passed predictFun argument (discussed Section Custom Predict Function). vivi function first computes variable importance interactions fitted model, produces square, symmetrical matrix contains variable importance diagonal variable interactions -diagonal. vivi function requires three inputs: fitted machine learning model, data frame used model’s training, name response variable fit. resulting matrix importance interaction values variables data frame, excluding response variable. default, embedded variable importance method available selected, agnostic permutation method applied. clarity, shown importanceType = 'agnostic' argument . example using embedded methods, see Section Embedded VImps. variables used supplied model importance interaction values set zero. viviHeatmap viviNetwork visualization functions (seen Section Visualisations) tailored displaying results vivi calculations, can also work square matrix identical row column names. (Note, symmetry assumption required viviHeatmap viviNetwork uses interaction values lower-triangular part matrix .) see description function arguments use: ?vivid::vivi()","code":"set.seed(1701) viviRf  <- vivi(fit = rf,                  data = myData,                  response = \"y\",                 gridSize = 50,                 importanceType = \"agnostic\",                 nmax = 500,                 reorder = TRUE,                 predictFun = NULL,                 numPerm = 4,                 showVimpError = FALSE)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"visualizing-the-results","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Visualizing the results","title":"vivid: Variable Importance and Variable Interaction Displays","text":"NOTE: viewing vignette vivid CRAN page, images may format correctly. recommended view vignette GitHub via following link: https://alaninglis.github.io/vivid/articles/vividVignette.html","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"heatmap-plot","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Heatmap plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"viviHeatmap function generates heatmap displays variable importance interactions, importance values diagonal interaction values -diagonal. function requires vivid matrix input, need symmetrical. Additionally, color palettes can specified importance interactions via impPal intPal arguments. default, opted single-hue, color-blind friendly sequential color palettes developed Zeileis et al[24]. palettes represent low high VIVI values low high luminance colors, respectively, can aid highlighting pertinent values. impLims intLims arguments determine range importance interaction values assigned colors. arguments provided, default values calculated based minimum maximum VIVI values vivid matrix. importance interaction values fall outside specified limits, squished closest limit. brevity, required vivid matrix input shown following code. see description function arguments, see ?vivid::viviheatmap() Figure 1: Heatmap random forest fit displaying 2-way interaction strength diagonal individual variable importance diagonal. \\(x_1\\) \\(x_2\\) show strong interaction \\(x_4\\) important predicting \\(y\\).","code":"viviHeatmap(mat = viviRf)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"network-plot","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Network plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"viviNetwork, network graph produced visualize importance interactions. Similar viviHeatmap, function requires vivid matrix input uses visual elements, size color, depict magnitude importance interaction values. graph displays variable node, size color reflect importance (larger darker nodes indicate higher importance). Pairwise interactions displayed connecting edges, thicker darker edges indicate higher interaction values. begin show network using default settings. Figure 2: Network plot random forest fit displaying 2-way interaction strength individual variable importance. \\(x_1\\) \\(x_2\\) show strong interaction \\(x_4\\) important predicting \\(y\\). can also filter interactions set value using intThreshold argument. can useful number variables included model large just highlight strongest interactions. default, unconnected nodes displayed, however, can removed setting argument removeNode = T. Figure 3: Network plot random forest fit displaying 2-way interaction strength individual variable importance. () filtered network shown displaying interactions 0.12, nodes shown. (b) unconnected nodes removed. network plot offers multiple customization possibilities comes displaying network style plot use layout argument. default layout circle argument accepts igraph layout function numeric matrix two columns, one row per node. Figure 4: Network plot random forest fit using custom layout. Finally, network plot highlight relationships model fit, can cluster variables together using cluster argument. argument can either accept vector cluster memberships nodes igraph package clustering function. following example, manually select variables VIVI values top 20%. selection allows us focus variables impact response. variables remain \\(x1\\) \\(x5\\). perform hierarchical clustering treating variable interactions similarities, goal grouping together high-interaction variables. manually select number groups want show via cutree function (cuts clustered data desired number groups). Finally rearrange layout using igraph. , igraph::layout_as_star places first variable (deemed relevant using VIVI seriation process) center, Figure 5 emphasizes key role important predictor also strongest interactions. Figure 5: Clustered network plot random forest fit. Figure 5, applying hierarchical clustering, can see strongest mutual interactions grouped together. Namley; \\(x1\\), \\(x2\\), \\(x4\\). remaining variables individually clustered.","code":"viviNetwork(mat = viviRf) viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = FALSE) viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = TRUE) viviNetwork(mat = viviRf,              layout = cbind(c(1,1,1,1,2,2,2,2,2), c(1,2,4,5,1,2,3,4,5))) set.seed(1701) # clustered and filtered network for rf intVals <- viviRf diag(intVals) <- NA    # select VIVI values in top 20% impTresh <- quantile(diag(viviRf),.8) intThresh <- quantile(intVals,.8,na.rm=TRUE) sv <- which(diag(viviRf) > impTresh |               apply(intVals, 1, max, na.rm=TRUE) > intThresh)  h <- hclust(-as.dist(viviRf[sv,sv]), method=\"single\")  viviNetwork(viviRf[sv,sv],             cluster = cutree(h, k = 3), # specify number of groups             layout = igraph::layout_as_star)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"univariate-partial-dependence-plot","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Univariate Partial Dependence Plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"pdpVars function constructs grid univariate PDPs ICE curves selected variables. use ICE curves assist identification linear non-linear effects. fit, data frame used train model, name response variable required inputs. example , select first five variables created vivid matrix display set number ICE curves displayed 100, via nIce argument. Figure 6: Partial dependence plots (black line) individual conditional expectation curves (colored lines) random forest fit Friedman data. changing partial dependence ICE curves \\(x1\\), \\(x2\\), \\(x4\\) indicate variables impact response.","code":"top5 <- colnames(viviRf)[1:5] pdpVars(data = myData,         fit = rf,         response = 'y',         vars = top5,         nIce = 100)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"generalized-partial-dependence-pairs-plot","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Generalized partial dependence pairs plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"employing matrix layout, pdpPairs function generates generalized pairs partial dependence plot (GPDP) encompasses univariate partial dependence (ICE curves) diagonal, bivariate partial dependence upper diagonal, scatterplot raw variable values lower diagonal, colours assigned points ICE curves predicted \\(\\hat{y}\\) value. univariate PDP, fit, data frame used train model, name response variable required inputs. full description function arguments, see ?vivid::pdpPairs. following example, select first five variables display set number shown ICE curves 100. Figure 7: Filtered generalized pairs partial dependence plot random forest fit Friedman data. univariate bivariate PDPs, can see \\(x1\\), \\(x2\\), \\(x4\\) impact response.","code":"set.seed(1701) pdpPairs(data = myData,           fit =  rf,           response = \"y\",           nmax = 500,           gridSize = 10,                   vars = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"),          nIce = 100)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"partial-dependence-zenplot","dir":"Articles","previous_headings":"Section 5: Visualisations","what":"Partial dependence ‘Zenplot’","title":"vivid: Variable Importance and Variable Interaction Displays","text":"pdpZen function utilizes space-saving technique based graph Eulerians, introduced Hierholzer Wiener 1873[25] create partial dependence plots. refer plots zen-partial dependence plots (ZPDP). plots based zigzag expanded navigation plots, also known zenplots, available zenplots package[26]. Zenplots designed showcase paired graphs high-dimensional data focus significant 2D displays. version, display bivariate PDPs emphasize variables significant interaction values compact zigzag layout. format useful dealing high-dimensional predictor space. begin, show ZPDP using variables model. Figure 8: Zen partial dependence plot random forest fit Friedman data. display variables used random forest model. Fig 8, can see PDPs laid zigzag structure, influential variable pairs displayed top generally decreasing move . Figure 9, , select subset variables display. case select first five variables data. argument zpath specifies variables plotted, defaulting dataset variables aside response. Figure 9: Zen partial dependence plot random forest fit Friedman data. display first five variables. can also create sequence sequences variable paths use pdpZen. via zPath function. zPath function takes four arguments. : viv - matrix interaction values, cutoff - exclude interaction values threshold, method - string indicating method use create path, connect - logical value indicating separate Eulerians connected. can choose two methods using zPath function: \"greedy.weighted\" \"strictly.weighted\". first method utilizes greedy Eulerian path algorithm connected graphs. method traverses edge least , beginning highest-weighted edge, moving remaining edges prioritizing highest-weighted edge. graph odd number nodes, edges may visited , additional edges may visited. second method, \"strictly.weighted\" visits edges strictly decreasing order weight (case, interaction values). connect argument set TRUE, sequences generated strictly weighted method combined create single path. code , provide example creating zen-paths using \"strictly.weighted\" method, top 10% interaction scores viviRf (.e., created vivid matrix.) Figure 10: ZPDP random forest fit Friedman data. sorting method defined ’strictly.weighted‘ method un-connected.","code":"set.seed(1701) pdpZen(data = myData, fit = rf, response = \"y\", nmax = 500, gridSize = 10) set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")) # set zpaths with different parameters intVals <- viviRf diag(intVals) <- NA intThresh <- quantile(intVals, .90, na.rm=TRUE) zpSw <- zPath(viv = viviRf, cutoff = intThresh, connect = FALSE, method = 'strictly.weighted')    set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = zpSw)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"example-using-the-predict-function","dir":"Articles","previous_headings":"Section 6: Custom Predict Function","what":"Example using the predict function","title":"vivid: Variable Importance and Variable Interaction Displays","text":"supply internal custom predict function called CVpredictfun importance interaction calculations. CVpredictfun wrapper around CVpredict condvis2 package[27]. CVpredict accepts broad range fit classes thus streamlining process calculating variable importance interactions. situations fit class handled CVpredict, supplying custom predict function vivi function way predictFun argument allows agnostic VIVI values calculated. example using vivid many different types models, see Section Model Fits following, provide small example using fit vivid using xgboost package create gradient boosting machine (GBM). begin build model. build vivid matrix GBM fit using custom predict function, must form given code snippet. Note term data must used custom predict function. use actual name data. Additionally, response variable included generating predict function xgboost. can now create visualisations. brevity, show heatmap. Figure 11: Heatmap GBM fit Friedman data.","code":"library(\"xgboost\") gbst <- xgboost(data = as.matrix(myData[,1:9]),                 label =  as.matrix(myData[,10]),                 nrounds = 100,                 verbose = 0) # predict function for GBM pFun <- function(fit, data, ...) predict(fit, as.matrix(data[,1:9]))  set.seed(1701) viviGBst <- vivi(fit = gbst,                  data = myData,                  response = \"y\",                  reorder = FALSE,                  normalized = FALSE,                  predictFun = pFun,                  gridSize = 50,                  nmax = 500) viviHeatmap(mat = viviGBst)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"using-embedded-importance-metrics","dir":"Articles","previous_headings":"Section 7: Embedded Vimps","what":"Using embedded importance metrics","title":"vivid: Variable Importance and Variable Interaction Displays","text":"following show examples select different (embedded) importance metrics use vivi function. illustrate process use random forest model fit using randomForest ranger packages.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"in-randomforest","dir":"Articles","previous_headings":"Section 7: Embedded Vimps","what":"In randomForest","title":"vivid: Variable Importance and Variable Interaction Displays","text":"begin fit randomForest model. Note randomForest model, argument importance = TRUE, multiple importance metrics returned. case, regression random forest, returned importance metrics percent increase mean squared error (%IncMSE) increase node purity (IncNodePurity). order choose specific metric use vivid, necessary specify one importance metrics returned random forest argument importanceType parameter vivi function. code select %IncMSE importance metric.","code":"set.seed(1701) rfEmbedded <- randomForest(y ~ ., data = myData, importance = TRUE) viviRfEmbedded <- vivi(fit = rfEmbedded,                         data = myData,                         response = \"y\",                        importanceType = \"%IncMSE\")"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"in-ranger","dir":"Articles","previous_headings":"Section 7: Embedded Vimps","what":"In ranger","title":"vivid: Variable Importance and Variable Interaction Displays","text":"ranger random forest model, importance metric must specified fitting model. code , select impurity importance metric. calling vivi function, importanceType argument set selected importance metric.","code":"library(\"ranger\") rang <- ranger(y~., data = myData, importance = 'impurity') viviRangEmbedded <- vivi(fit = rang,                           data = myData,                           response = \"y\",                          importanceType = \"impurity\")"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"models-used","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"Models Used","title":"vivid: Variable Importance and Variable Interaction Displays","text":"section designed quick-stop guide use popular machine learning R packages vivid. visualisations omitted goal familiarize user implementing vivid. previously discussed, vivid work ---box several R packages, however, others, custom predict function supplied. packages (models) shown : caret - Neural Network randomForest - Random Forest ranger - Random Forest e1071 - Support Vector Machine gbm - Gradient Boosted Machine mlr3 - k-nearest Neighbours xgboost - eXtreme Gradient Boosting bartMachine - BART keras - Neural Network simplicity, section use popular air quality dataset, Ozone response. First remove missing values:","code":"aq <- na.omit(airquality)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"caret---neural-network","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"caret - Neural Network","title":"vivid: Variable Importance and Variable Interaction Displays","text":"caret package (short Classification REgression Training) R provides unified interface streamline process creating predictive models. following example, use caret package utilize neural network model fit via nnet package. caret catered vivid, need custom predict function .","code":"library(\"caret\") # build caret nnet model nn <- train(Ozone ~ ., data = aq, method = \"nnet\", trace = FALSE, linout = TRUE, maxit = 200)  # vivid vivi(data = aq, fit = nn, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"randomforest---random-forest","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"randomForest - Random Forest","title":"vivid: Variable Importance and Variable Interaction Displays","text":"randomForest package R implements Random Forest algorithm classification regression, popular ensemble method builds multiple decision trees training aggregates results predictions.","code":"library(\"randomForest\") # build  random forest model rf <- randomForest(Ozone ~ ., data = aq)  # vivid vivi(data = aq, fit = rf, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"ranger---random-forest","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"ranger - Random Forest","title":"vivid: Variable Importance and Variable Interaction Displays","text":"ranger package R fast implementation Random Forests, leveraging optimized C++ code efficiency.","code":"library(\"ranger\") # build  ranger random forest model rngr <- ranger(Ozone ~ ., data = aq)  # vivid vivi(data = aq, fit = rngr, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"e1071---support-vector-machine","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"e1071 - Support Vector Machine","title":"vivid: Variable Importance and Variable Interaction Displays","text":"e1071 package R provides functions various machine learning algorithms including support vector machines (SVMs).","code":"library(\"e1071\") # build SVM model sv <- svm(Ozone ~ ., data = aq, kernel = \"radial\")  # vivid vivi(data = aq, fit = sv, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"gbm---generalized-boosted-model","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"gbm - Generalized Boosted Model","title":"vivid: Variable Importance and Variable Interaction Displays","text":"gbm package R stands Generalized Boosted Models. offers efficient implementation gradient boosting algorithms classification, regression, machine learning tasks.","code":"library(\"gbm\") # build gbm model gm <-  gbm(Ozone ~ ., data = aq, distribution = \"gaussian\", n.trees = 100, interaction.depth = 4)  # vivid vivi(data = aq, fit = gm, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"mlr3---k-nearest-neighbours","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"mlr3 - k-nearest Neighbours","title":"vivid: Variable Importance and Variable Interaction Displays","text":"mlr3 package R offers modern, object-oriented framework machine learning tasks R, providing tools data preprocessing, model training, evaluation, tuning. , fit k-nearest neighbours model data.","code":"library(\"mlr3\") library(\"mlr3learners\")  # Define a regression task task <- TaskRegr$new(id = \"airquality\", backend = aq, target = \"Ozone\")   # Train a gradient boosting model using mlr3 learner <- lrn(\"regr.kknn\") m3 <- learner$train(task)  # vivid vivi(data = aq, fit = m3, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"bartmachine---bart","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"bartMachine - BART","title":"vivid: Variable Importance and Variable Interaction Displays","text":"bartMachine package R provides implementation Bayesian Additive Regression Trees (BART), non-parametric Bayesian model uses decision trees underlying model.","code":"library(\"bartMachine\")  # build bartMachine model bm <- bartMachine(X = aq[,2:6],                    y = aq[,1],                    num_trees = 20,                   num_burn_in = 50,                   num_iterations_after_burn_in = 100)   vivi(data = aq, fit = bm, response = 'Ozone')"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"xgboost---gradient-boosting","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"xgboost - Gradient Boosting","title":"vivid: Variable Importance and Variable Interaction Displays","text":"xgboost package (short eXtreme Gradient Boosting) implementation gradient boosting supports regression classification. seen Section Custom Predict Function, xgboost package requires user supply custom predict function work vivid. setting data argument xgboost, remember include variables (including response). producing custom predict function, structure must match example. Note term data must used actual name data.","code":"library(\"xgboost\") # build xgboost model gbst <- xgboost(data = as.matrix(aq[,1:6]),                 label =  as.matrix(aq[,1]),                 nrounds = 100,                 verbose = 0)  # predict function for GBM pFun <- function(fit, data, ...) predict(fit, as.matrix(data[,1:6]))  # vivid vivi(data = aq, fit = gbst, response = 'Ozone',  predictFun = pFun)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"keras---neural-network","dir":"Articles","previous_headings":"Section 8: Model Fits","what":"keras - Neural Network","title":"vivid: Variable Importance and Variable Interaction Displays","text":"keras package R interface original keras Python library. allows R users build train neural network models using high-level Keras API. use keras data must first normalised. custom predict function must made use vivid.","code":"library(\"keras\")  # Normalize the data normalize_data <- function(data) {   return((data - min(data)) / (max(data) - min(data))) }  aqn <- as.data.frame(lapply(aq, normalize_data))   # Define model architecture model <- keras_model_sequential() %>%   layer_dense(units = 8, activation = 'relu', input_shape = ncol(aqn) - 1) %>%   layer_dense(units = 1)   # predict function for keras pFun <- function(fit, data, ...) predict(fit, as.matrix(data[, -1]))  # vivid vivi(data = aq, fit = model, response = 'Ozone', predictFun = pFun)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"classification-example","dir":"Articles","previous_headings":"Section 9: Classification","what":"Classification example","title":"vivid: Variable Importance and Variable Interaction Displays","text":"section, briefly describe apply visualisations classification example using iris data set. begin fit ranger random forest model “Species” response create vivi matrix setting category classification “setosa” using class.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"vivi","dir":"Articles","previous_headings":"Section 9: Classification","what":"vivi","title":"vivid: Variable Importance and Variable Interaction Displays","text":"","code":"set.seed(1701) rfClassif <- ranger(Species~ ., data = iris, probability = T,                      importance = \"impurity\")  set.seed(101) viviClassif  <- vivi(fit = rfClassif,                       data = iris,                       response = \"Species\",                      gridSize = 10,                      nmax = 50,                      reorder = TRUE,                      class = \"setosa\")"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"heatmap","dir":"Articles","previous_headings":"Section 9: Classification","what":"Heatmap","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Next plot heatmap network plot iris data. Figure 12: Heatmap () Network plot (b) random forest fit iris data","code":"viviHeatmap(mat = viviClassif) viviNetwork(mat = viviClassif)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"gpdp","dir":"Articles","previous_headings":"Section 9: Classification","what":"GPDP","title":"vivid: Variable Importance and Variable Interaction Displays","text":"mentioned , PDPs evaluated grid can extrapolate data. solve issue calculate convex hull around data remove points fall outside convex hull, shown . Figure 12: GPDP random forest fit iris data extrapolated data removed.","code":"set.seed(1701) pdpPairs(data = iris,           fit = rfClassif,           response = \"Species\",          class = \"setosa\",            convexHull = T,           gridSize = 10,           nmax = 50)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-10-full-script","dir":"Articles","previous_headings":"","what":"Section 10: Full Script","title":"vivid: Variable Importance and Variable Interaction Displays","text":"section consolidates Sections Data Model, vivi, Visualisations Custom Predict Function, Embedded Vimps single script facilitate ease viewing.","code":"# Load libraries library(\"vivid\")  library(\"randomForest\")  # Create data based on the Friedman equation set.seed(101) genFriedman <- function(noFeatures = 10, noSamples = 100, sigma = 1) {      # Create dataframe with named columns   df <- setNames(as.data.frame(matrix(runif(noSamples * noFeatures, 0, 1), nrow = noSamples),                                 stringsAsFactors = FALSE),                   paste0(\"x\", 1:noFeatures))      # Equation: y = 10sin(πx1x2) + 20(x3−0.5)^2 + 10x4 + 5x5 + ε      df$y <- 10 * sin(pi * df$x1 * df$x2) +      20 * (df$x3 - 0.5)^2 +      10 * df$x4 +      5 * df$x5 +      rnorm(noSamples, sd = sigma) # error      return(df) }  myData <- genFriedman(noFeatures = 9, noSamples = 350, sigma = 1)   -------------------------------------------------------------------    # Fit random forest using randomForest package set.seed(1701) rf <- randomForest(y ~ ., data = myData)  -------------------------------------------------------------------  # Run vivid set.seed(1701) viviRf  <- vivi(fit = rf,                  data = myData,                  response = \"y\",                 gridSize = 50,                 importanceType = \"agnostic\",                 nmax = 500,                 reorder = TRUE,                 predictFun = NULL,                 numPerm = 4,                 showVimpError = FALSE)  -------------------------------------------------------------------  # Visualisations:    # 1.0: Heatmap viviHeatmap(mat = viviRf)  # 1.1: Heatmap with custom colour palettes and a small border around the diagonal importance values viviHeatmap(mat = viviRf,             intPal = colorspace::sequential_hcl(palette = \"Oslo\", n = 100),             impPal = rev(colorspace::sequential_hcl(palette = \"Reds 3\", n = 100)),             border = T)  # 2.0: Network viviNetwork(mat = viviRf)  # 2.1: Network with interactions below 0.12 are filtered.  # By default, unconnected nodes are displayed, however, they can be removed by setting `removeNode = T` viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = FALSE) viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = TRUE)  # 2.3: Network clustered and with interactions thresholded set.seed(1701) # clustered and filtered network for rf intVals <- viviRf diag(intVals) <- NA    # select VIVI values in top 20% impTresh <- quantile(diag(viviRf),.8) intThresh <- quantile(intVals,.8,na.rm=TRUE) sv <- which(diag(viviRf) > impTresh |               apply(intVals, 1, max, na.rm=TRUE) > intThresh)  h <- hclust(-as.dist(viviRf[sv,sv]), method=\"single\")  # plot viviNetwork(viviRf[sv,sv],             cluster = cutree(h, k = 3), # specify number of groups             layout = igraph::layout_as_star)  # 3.0: PDP of the top 5 variables extracted from the vivi matrix and number of ICe curves set to 100 top5 <- colnames(viviRf)[1:5] pdpVars(data = myData,         fit = rf,         response = 'y',         vars = top5,         nIce = 100)  # 4.0: GPDP of the variables x1 to x5, with 100 ICE curves shown.  set.seed(1701) pdpPairs(data = myData,           fit =  rf,           response = \"y\",           nmax = 500,           gridSize = 10,                   vars = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"),          nIce = 100)  # 5.0: ZPDP of all variables set.seed(1701) pdpZen(data = myData, fit = rf, response = \"y\", nmax = 500, gridSize = 10)  # 5.1: ZPDP where the `zpath` argument specifies the variables to be plotted. In this case, x1 to x5. set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"))  # 5.2: ZPDP with the zpaths set with different parameters using the `zPath` function. intVals <- viviRf diag(intVals) <- NA intThresh <- quantile(intVals, .90, na.rm=TRUE) zpSw <- zPath(viv = viviRf, cutoff = intThresh, connect = FALSE, method = 'strictly.weighted')  set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = zpSw)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"using-a-custom-predict-function","dir":"Articles","previous_headings":"Section 10: Full Script","what":"Using a custom predict function","title":"vivid: Variable Importance and Variable Interaction Displays","text":"","code":"library(\"vivid\") library(\"xgboost\") gbst <- xgboost(data = as.matrix(myData[,1:9]),                 label =  as.matrix(myData[,10]),                 nrounds = 100,                 verbose = 0)  # predict function for GBM pFun <- function(fit, data, ...) predict(fit, as.matrix(data[,1:9]))  # run vivid set.seed(1701) viviGBst <- vivi(fit = gbst,                  data = myData,                  response = \"y\",                  reorder = FALSE,                  normalized = FALSE,                  predictFun = pFun,                  gridSize = 50,                  nmax = 500)  # plot heatmap viviHeatmap(mat = viviGBst)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"using-embedded-variable-importance","dir":"Articles","previous_headings":"Section 10: Full Script","what":"Using embedded variable importance","title":"vivid: Variable Importance and Variable Interaction Displays","text":"","code":"library(\"vivid\") library(\"randomForest\") library(\"ranger\")  # randomForest # Note importance must be set to TRUE to use embedded importance scores.  set.seed(1701) rfEmbedded <- randomForest(y ~ ., data = myData, importance = TRUE)  # Using % increase in MSE as the importance metric in vivid viviRfEmbedded <- vivi(fit = rfEmbedded,                         data = myData,                         response = \"y\",                        importanceType = \"%IncMSE\")  # Plot Heatmap viviHeatmap(mat = viviRfEmbedded)  # ranger # Note the importance metric is selected directly in ranger rang <- ranger(y~., data = myData, importance = 'impurity')  # Run vivid viviRangEmbedded <- vivi(fit = rang,                           data = myData,                           response = \"y\",                          importanceType = \"impurity\")  # Plot Heatmap viviHeatmap(mat = viviRangEmbedded)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"classification","dir":"Articles","previous_headings":"Section 10: Full Script","what":"Classification","title":"vivid: Variable Importance and Variable Interaction Displays","text":"","code":"library(\"vivid\") library(\"randomForest\")  set.seed(1701) rfClassif <- ranger(Species~ ., data = iris, probability = T,                      importance = \"impurity\")  set.seed(101) viviClassif  <- vivi(fit = rfClassif,                       data = iris,                       response = \"Species\",                      gridSize = 10,                      nmax = 50,                      reorder = TRUE,                      class = \"setosa\")  viviHeatmap(mat = viviClassif)  set.seed(1701) pdpPairs(data = iris,           fit = rfClassif,           response = \"Species\",          class = \"setosa\",            convexHull = T,           gridSize = 10,           nmax = 50)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-11-references","dir":"Articles","previous_headings":"","what":"Section 11: References","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Alan Inglis Andrew Parnell Catherine B. Hurley (2022) Visualizing Variable Importance Variable Interaction Effects Machine Learning Models. Journal Computational Graphical Statistics (3), pages 1-13 Breiman, Leo. 2001. “Random Forests.” Machine Learning 45 (1): 5–32. https://doi.org/10.1023/: 1010933404324. Friedman, J. H. 2000. “Greedy Function Approximation: Gradient Boosting Machine.” Annals Statistics 29 (November). https://doi.org/10.1214/aos/1013203451. Chipman, Hugh , Edward George, Robert E McCulloch. 2010. “BART: Bayesian Additive Regression Trees.” Annals Applied Statistics 4 (1): 266–98. Paluszynska, Aleksandra, Przemyslaw Biecek, Yue Jiang. 2020. randomForestExplainer: Explaining Visualizing Random Forests Terms Variable Importance. https://CRAN.R-project.org/ package=randomForestExplainer. Ishwaran, Hemant, Udaya B Kogalur, Eiran Z Gorodeski, Andy J Minn, Michael S Lauer. 2010. “High-Dimensional Variable Selection Survival Data.” Journal American Statistical Associa- tion 105 (489): 205–17. Probst, Philipp. 2020. varImp: RF Variable Importance Arbitrary Measures. https://CRAN.R-project. org/package=varImp. Strobl, Carolin, Anne-Laure Boulesteix, Thomas Kneib, Thomas Augustin, Achim Zeileis. 2008. “Conditional Variable Importance Random Forests.” BMC Bioinformatics 9 (307). https://doi. org/10.1186/1471-2105-9-307 Maksymiuk, Szymon, Ewelina Karbowiak, Przemyslaw Biecek. 2021. EIX: Explain Interactions ’XGBoost’. https://CRAN.R-project.org/package=EIX. Molnar, Christoph, Bernd Bischl, Giuseppe Casalicchio. 2018. “Iml: r Package Interpretable Machine Learning.” JOSS 3 (26): 786. https://doi.org/10.21105/joss.00786. Mayer M (2023). flashlight: Shed Light Black Box Machine Learning Models. R package version 0.9.0, https://CRAN.R-project.org/package=flashlight. Biecek, Przemyslaw. 2018. “DALEX: Explainers Complex Predictive Models R.” Journal Machine Learning Research 19 (84): 1–5. https://jmlr.org/papers/v19/18-416.html. Greenwell, Brandon M., Bradley C. Boehmke. 2020. “Variable Importance Plots—Introduction vip Package.” R Journal 12 (1): 343–66. https://doi.org/10.32614/RJ-2020-013. Fisher ., Rudin C., Dominici F. (2018). Models Wrong many Useful: Variable Importance Black-Box, Proprietary, Misspecified Prediction Models, using Model Class Reliance. Arxiv. Marvin N. Wright, Andreas Ziegler (2017). ranger: Fast Implementation Random Forests High Dimensional Data C++ R. Journal Statistical Software, 77(1), 1-17. doi:10.18637/jss.v077.i01], randomForest^[. Liaw M. Wiener (2002). Classification Regression randomForest. R News 2(3), 18–22. Bischl B, Lang M, Kotthoff L, Schiffner J, Richter J, Studerus E, Casalicchio G, Jones Z (2016). “mlr: Machine Learning R.” Journal Machine Learning Research, 17(170), 1-5. https://jmlr.org/papers/v17/15-066.html. Lang M, Binder M, Richter J, Schratz P, Pfisterer F, Coors S, Au Q, Casalicchio G, Kotthoff L, Bischl B (2019). “mlr3: modern object-oriented machine learning framework R.” Journal Open Source Software. doi:10.21105/joss.01903 Kuhn M, Vaughan D (2023). parsnip: Common API Modeling Analysis Functions. R package version 1.1.1, https://CRAN.R-project.org/package=parsnip. Friedman, J. H. 2000. “Greedy Function Approximation: Gradient Boosting Machine.” Annals Statistics 29 (November). https://doi.org/10.1214/aos/1013203451. Goldstein, Alex, Adam Kapelner, Justin Bleich, Emil Pitkin. 2015. “Peeking Inside Black Box: Visualizing Statistical Learning Plots Individual Conditional Expectation.” Journal Computational Graphical Statistics 24 (1): 44–65. https://doi.org/10.1080/10618600.2014. 907095. Greenwell, Brandon M. 2017. “pdp: r Package Constructing Partial Dependence Plots.” R Journal 9 (1): 421–36. https://journal.r-project.org/archive/2017/RJ-2017-016/index.html. Friedman, J. H. Popescu, B. E. (2008). “Predictive learning via rule ensembles.” Annals Applied Statistics. JSTOR, 916–54. Friedman, Jerome H. (1991) Multivariate adaptive regression splines. Annals Statistics 19 (1), pages 1-67. Zeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, Claus O. Wilke. 2020. “Colorspace: Toolbox Manipulating Assessing Colors Palettes.” Journal Statistical Software, Articles 96 (1): 1–49 Hierholzer, Carl, Chr Wiener. 1873. “Über Die möglichkeit, Einen Linienzug Ohne Wiederholung Und Ohne Unterbrechung Zu Umfahren.” Mathematische Annalen 6 (1): 30–32. Hofert, Marius, Wayne Oldford. 2020. “Zigzag Expanded Navigation Plots R: R Package zenplots.” Journal Statistical Software 95 (4): 1–44. Hurley, Catherine, Mark OConnell, Katarina Domijan. 2022. Condvis2: Interactive Conditional Visualization Supervised Unsupervised Models Shiny.","code":""},{"path":"https://alaninglis.github.io/vivid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alan Inglis. Author, maintainer. Andrew Parnell. Author. Catherine Hurley. Author.","code":""},{"path":"https://alaninglis.github.io/vivid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inglis, ., Parnell, ., Hurley, C. B. (2022). Visualizing Variable Importance Variable Interaction Effects Machine Learning Models. Journal Computational Graphical Statistics, 1-13.","code":"@Article{,   title = {Visualizing Variable Importance and Variable Interaction Effects in Machine Learning Models},   author = {Alan Inglis and Andrew Parnell and Catherine B. Hurley},   journal = {Journal of Computational and Graphical Statistics},   year = {2022},   pages = {1-13},   publisher = {Taylor & Francis}, }"},{"path":"https://alaninglis.github.io/vivid/index.html","id":"vivid","dir":"","previous_headings":"","what":"Variable Importance and Variable Interaction Displays","title":"Variable Importance and Variable Interaction Displays","text":"Variable importance, interaction measures partial dependence plots important summaries interpretation statistical machine learning models. R package vivid (variable importance variable interaction displays) create new visualisation techniques exploring model summaries. construct heatmap graph-based displays showing variable importance interaction jointly, carefully designed highlight important aspects fit. also construct new matrix-type layout showing single bivariate partial dependence plots, alternative layout based graph Eulerians focusing key subsets. new visualisations model-agnostic applicable regression classification supervised learning settings. enhance interpretation even situations number variables large interaction structure complex. practical example package use can found : https://alaninglis.github.io/vivid/articles/vividVignette.html","code":""},{"path":"https://alaninglis.github.io/vivid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Variable Importance and Variable Interaction Displays","text":"zenplots package (used within vivid) requires graph package BioConductor. install graph zenplots packages use: can install released version vivid CRAN : development version GitHub : can load package :","code":"if (!requireNamespace(\"graph\", quietly = TRUE)){   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\") install.packages(\"vivid\") # install.packages(\"devtools\") devtools::install_github(\"AlanInglis/vivid\") library(vivid)"},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":null,"dir":"Reference","previous_headings":"","what":"as.data.frame.vivid — as.data.frame.vivid","title":"as.data.frame.vivid — as.data.frame.vivid","text":"Takes matrix class vivid turn data frame containing variable names, Vimp Vint values, row column index original matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.data.frame.vivid — as.data.frame.vivid","text":"","code":"# S3 method for vivid as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.data.frame.vivid — as.data.frame.vivid","text":"x matrix class 'vivid' converted data frame. row.names NULL character vector giving row names data frame. Missing values allowed. optional Logical. TRUE, setting row names converting column names (syntactic names: see make.names) optional. Note R's base package .data.frame() methods use optional column names treatment, basically meaning data.frame(*, check.names = !optional). See also make.names argument matrix method. ... Additional arguments passed methods.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.data.frame.vivid — as.data.frame.vivid","text":"data frame Vimp Vint values index vivid matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.data.frame.vivid — as.data.frame.vivid","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) aq <- aq[1:20,]# for speed rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... myDf <- as.data.frame(myMat) myDf #>    Variable_1 Variable_2     Value Measure Row Col #> 1     Solar.R    Solar.R 2.9769444    Vimp   1   1 #> 2         Day    Solar.R 0.5876459    Vint   2   1 #> 3        Temp    Solar.R 0.2889048    Vint   3   1 #> 4        Wind    Solar.R 0.2115232    Vint   4   1 #> 5       Month    Solar.R 0.0000000    Vint   5   1 #> 6     Solar.R        Day 0.5876459    Vint   1   2 #> 7         Day        Day 2.2207383    Vimp   2   2 #> 8        Temp        Day 0.2637584    Vint   3   2 #> 9        Wind        Day 0.2378596    Vint   4   2 #> 10      Month        Day 0.0000000    Vint   5   2 #> 11    Solar.R       Temp 0.2889048    Vint   1   3 #> 12        Day       Temp 0.2637584    Vint   2   3 #> 13       Temp       Temp 0.8746594    Vimp   3   3 #> 14       Wind       Temp 0.2494973    Vint   4   3 #> 15      Month       Temp 0.0000000    Vint   5   3 #> 16    Solar.R       Wind 0.2115232    Vint   1   4 #> 17        Day       Wind 0.2378596    Vint   2   4 #> 18       Temp       Wind 0.2494973    Vint   3   4 #> 19       Wind       Wind 2.3242459    Vimp   4   4 #> 20      Month       Wind 0.0000000    Vint   5   4 #> 21    Solar.R      Month 0.0000000    Vint   1   5 #> 22        Day      Month 0.0000000    Vint   2   5 #> 23       Temp      Month 0.0000000    Vint   3   5 #> 24       Wind      Month 0.0000000    Vint   4   5 #> 25      Month      Month 0.0000000    Vimp   5   5 # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"pdpPairs — pdpPairs","title":"pdpPairs — pdpPairs","text":"Creates pairs plot showing bivariate pdp upper diagonal, ice/univariate pdp diagonal data lower diagonal","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pdpPairs — pdpPairs","text":"","code":"pdpPairs(   data,   fit,   response,   vars = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   fitlims = \"pdp\",   gridSize = 10,   nmax = 500,   class = 1,   nIce = 30,   colorVar = NULL,   comboImage = FALSE,   predictFun = NULL,   convexHull = FALSE,   probability = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pdpPairs — pdpPairs","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. vars variables plot (order), defaults variables response. pal vector colors show predictions, use scale_fill_gradientn fitlims Specifies fit range color map. Options numeric vector length 2, \"pdp\" (default), cases limits calculated pdp, \"\", limits calculated observations pdp. Predictions outside fitlims squished color scale. gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. nIce Number ice curves plotted, defaults 30. colorVar variable colour predictions . comboImage TRUE  draws pdp mixed variable plots image, otherwise interaction plot. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. convexHull TRUE, convex hull computed points outside convex hull removed. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pdpPairs — pdpPairs","text":"pairs plot","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pdpPairs — pdpPairs","text":"","code":"# Load in the data: aq <- na.omit(airquality) f <- lm(Ozone ~ ., data = aq) pdpPairs(aq, f, \"Ozone\") #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # \\donttest{ # Run a ranger model: library(ranger) library(MASS) Boston1 <- Boston[, c(4:6, 8, 13:14)] Boston1$chas <- factor(Boston1$chas) fit <- ranger(medv ~ ., data = Boston1, importance = \"permutation\") pdpPairs(Boston1[1:30, ], fit, \"medv\") #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  pdpPairs(Boston1[1:30, ], fit, \"medv\", comboImage = TRUE) #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  viv <- vivi(Boston1, fit, \"medv\") #> Agnostic variable importance method used. #> Calculating interactions... # show top variables only pdpPairs(Boston1[1:30, ], fit, \"medv\", comboImage = TRUE, vars = rownames(viv)[1:4]) #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # } # \\donttest{ library(ranger) rf <- ranger(Species ~ ., data = iris, probability = TRUE) pdpPairs(iris, rf, \"Species\") # prediction probs for first class, setosa #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  pdpPairs(iris, rf, \"Species\", class = \"versicolor\") # prediction probs versicolor #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":null,"dir":"Reference","previous_headings":"","what":"pdpVars — pdpVars","title":"pdpVars — pdpVars","text":"Displays individual conditional expectation (ICE) curves aggregated partial dependence variable grid.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pdpVars — pdpVars","text":"","code":"pdpVars(   data,   fit,   response,   vars = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   gridSize = 10,   nmax = 500,   class = 1,   nIce = 30,   predictFun = NULL,   limits = NULL,   colorVar = NULL,   draw = TRUE,   probability = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pdpVars — pdpVars","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. vars variables plot (order), defaults variables response. pal vector colors show predictions, use scale_fill_gradientn gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. nIce Number ice curves plotted, defaults 30. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. limits vector determining limits predicted values. colorVar variable colour predictions . draw FALSE, plot drawn. Default TRUE. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pdpVars — pdpVars","text":"grid displaying ICE curves univariate partial dependence.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pdpVars — pdpVars","text":"","code":"# \\donttest{ # Load in the data: aq <- na.omit(airquality) fit <- lm(Ozone ~ ., data = aq) pdpVars(aq, fit, \"Ozone\") #> Error in loadNamespace(x): there is no package called ‘lemon’  # Classification library(ranger) rfClassif <- ranger(Species ~ ., data = iris, probability = TRUE) pdpVars(iris, rfClassif, \"Species\", class = 3) #> Error in loadNamespace(x): there is no package called ‘lemon’  pp <- pdpVars(iris, rfClassif, \"Species\", class = 2, draw = FALSE) #> Error in loadNamespace(x): there is no package called ‘lemon’ pp[[1]] #> Error in eval(expr, envir, enclos): object 'pp' not found pdpVars(iris, rfClassif, \"Species\", class = 2, colorVar = \"Species\") #> Error in loadNamespace(x): there is no package called ‘lemon’ # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a zenplot displaying partial dependence values. — pdpZen","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"Constructs zigzag expanded navigation plot (zenplot) displaying partial dependence values.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"","code":"pdpZen(   data,   fit,   response,   zpath = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   fitlims = \"pdp\",   gridSize = 10,   nmax = 500,   class = 1,   comboImage = FALSE,   rug = TRUE,   predictFun = NULL,   convexHull = FALSE,   probability = FALSE,   ... )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"data Data frame used fit fit supervised machine learning model, understands condvis2::CVpredict response name response fit zpath Plot shows consecutive pairs variables. Defaults variables response. Recommend constructing zpath witn calcZpath. pal vector colors show predictions, use scale_fill_gradientn fitlims Specifies fit range color map. Options numeric vector length 2, \"pdp\" (default), cases limits calculated pdp, \"\", limits calculated observations pdp predictions outside fitlims squished color scale. gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. comboImage TRUE  draws pdp mixed variable plots image, otherwise interaction plot. rug TRUE adds rugs data pdp plots predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. convexHull TRUE, convex hull computed points outside convex hull removed. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale. ... passed zenplot","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"zenplot partial dependence values.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"","code":"if (FALSE) { # To use this function, install zenplots and graph from Bioconductor. if (!requireNamespace(\"graph\", quietly = TRUE)) {   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\")  library(MASS) library(ranger) Boston1 <- Boston Boston1$chas <- factor(Boston1$chas) rf <- ranger(medv ~ ., data = Boston1) pdpZen(Boston1[1:30, ], rf, response = \"medv\", zpath = names(Boston1)[1:4], comboImage = T) # Find the top variables in rf set.seed(123) viv <- vivi(Boston1, rf, \"medv\", nmax = 30) # use 30 rows, for speed pdpZen(Boston1, rf, response = \"medv\", zpath = rownames(viv)[1:4], comboImage = T) zpath <- zPath(viv, cutoff = .2) # find plots whose interaction score exceeds .2 pdpZen(Boston1, rf, response = \"medv\", zpath = zpath, comboImage = T) }"},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":null,"dir":"Reference","previous_headings":"","what":"vip2vivid — vip2vivid","title":"vip2vivid — vip2vivid","text":"Takes measured importance interactions vip package turns matrix can used plotting. Accepts variable importance methods supplied vip.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vip2vivid — vip2vivid","text":"","code":"vip2vivid(importance, interaction, reorder = TRUE)"},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vip2vivid — vip2vivid","text":"importance Measured importance vip package using vi function. interaction Measured interaction vip package using vint function. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vip2vivid — vip2vivid","text":"matrix interaction values, importance diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vip2vivid — vip2vivid","text":"","code":"if (FALSE) { library(ranger) library(vip) aq <- na.omit(airquality) # get data nameAq <- names(aq[-1]) # get feature names  rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") # create ranger random forest fit vImp <- vi(rF) # vip importance vInt <- vint(rF, feature_names = nameAq) # vip interaction  vip2vivid(vImp, vInt) }"},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":null,"dir":"Reference","previous_headings":"","what":"vivi — vivi","title":"vivi — vivi","text":"Creates matrix displaying variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vivi — vivi","text":"","code":"vivi(   data,   fit,   response,   gridSize = 50,   importanceType = \"agnostic\",   nmax = 500,   reorder = TRUE,   class = 1,   predictFun = NULL,   normalized = FALSE,   numPerm = 4,   showVimpError = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vivi — vivi","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. gridSize size grid evaluating predictions. importanceType Used select importance metric. default, agnostic importance measure used. embedded metric available, setting argument importance metric use selected importance values vivid-matrix. Please refer examples given illustration. Alternatively, set equal \"agnostic\" (default) override embedded importance measures return agnostic importance values. nmax Maximum number data rows consider. Default 500. Use rows NULL. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances. class Category classification, factor level, number indicating factor level. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. normalized Friedman's H-statistic normalized . Default FALSE. numPerm Number permutations perform agnostic importance. Default 4. showVimpError Logical. TRUE, numPerm > 1 tibble containing variable names, importance values, standard error importance printed console.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vivi — vivi","text":"matrix interaction values, importance diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vivi — vivi","text":"argument importanceType = 'agnostic', agnostic permutation importance (1) calculated. Friedman's H statistic (2) used measuring interactions. measure based partial dependence curves relates interaction strength pair variables total effect strength variable pair.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"vivi — vivi","text":"1: Fisher ., Rudin C., Dominici F. (2018). Models Wrong many Useful: Variable Importance Black-Box, Proprietary, Misspecified Prediction Models, using Model Class Reliance. Arxiv. 2: Friedman, J. H. Popescu, B. E. (2008). “Predictive learning via rule ensembles.” Annals Applied Statistics. JSTOR, 916–54.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vivi — vivi","text":"","code":"aq <- na.omit(airquality) f <- lm(Ozone ~ ., data = aq) m <- vivi(fit = f, data = aq, response = \"Ozone\") # as expected all interactions are zero #> Agnostic variable importance method used. #> Calculating interactions... viviHeatmap(m)   # Select importance metric library(randomForest) #> randomForest 4.7-1.1 #> Type rfNews() to see new features/changes/bug fixes. #>  #> Attaching package: ‘randomForest’ #> The following object is masked from ‘package:ranger’: #>  #>     importance rf1 <- randomForest(Ozone~., data = aq, importance = TRUE) m2 <- vivi(fit = rf1, data = aq, response = 'Ozone',            importanceType = '%IncMSE') # select %IncMSE as the importance measure #> %IncMSE importance selected. #> Calculating interactions... viviHeatmap(m2)   # \\donttest{ library(ranger) rf <- ranger(Species ~ ., data = iris, importance = \"impurity\", probability = TRUE) vivi(fit = rf, data = iris, response = \"Species\") # returns agnostic importance #> Agnostic variable importance method used. #> Calculating interactions... #>              Petal.Length Petal.Width Sepal.Length Sepal.Width #> Petal.Length    0.3089045   6.8231117   6.68572389  3.78687803 #> Petal.Width     6.8231117   0.3216355   6.88948759  3.90537886 #> Sepal.Length    6.6857239   6.8894876   0.02425584  3.88957404 #> Sepal.Width     3.7868780   3.9053789   3.88957404  0.01292144 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\"  vivi(fit = rf, data = iris, response = \"Species\",      importanceType = \"impurity\") # returns selected 'impurity' importance. #> Embedded impurity variable importance method used. #> Calculating interactions... #>              Petal.Length Petal.Width Sepal.Length Sepal.Width #> Petal.Length    43.169839    7.336993     7.117266    3.764107 #> Petal.Width      7.336993   43.043747     7.364458    4.037386 #> Sepal.Length     7.117266    7.364458     8.229260    3.860363 #> Sepal.Width      3.764107    4.037386     3.860363    1.348224 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\"  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"viviHeatmap — viviHeatmap","title":"viviHeatmap — viviHeatmap","text":"Plots Heatmap showing variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviHeatmap — viviHeatmap","text":"","code":"viviHeatmap(   mat,   intPal = rev(colorspace::sequential_hcl(palette = \"Purples 3\", n = 100)),   impPal = rev(colorspace::sequential_hcl(palette = \"Greens 3\", n = 100)),   intLims = NULL,   impLims = NULL,   border = FALSE,   angle = 0 )"},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviHeatmap — viviHeatmap","text":"mat matrix, returned vivi, values plotted. intPal vector colours show interactions, use scale_fill_gradientn. impPal vector colours show importance, use scale_fill_gradientn. intLims Specifies fit range color map interaction strength. impLims Specifies fit range color map importance. border Logical. TRUE draw black border around diagonal elements. angle angle rotate x-axis labels. Defaults zero.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviHeatmap — viviHeatmap","text":"heatmap plot showing variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviHeatmap — viviHeatmap","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... viviHeatmap(myMat)  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"viviNetwork — viviNetwork","title":"viviNetwork — viviNetwork","text":"Create Network plot displaying variable importance variable interaction.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviNetwork — viviNetwork","text":"","code":"viviNetwork(   mat,   intThreshold = NULL,   intLims = NULL,   impLims = NULL,   intPal = rev(colorspace::sequential_hcl(palette = \"Purples 3\", n = 100)),   impPal = rev(colorspace::sequential_hcl(palette = \"Greens 3\", n = 100)),   removeNode = FALSE,   layout = igraph::layout_in_circle,   cluster = NULL,   nudge_x = 0.05,   nudge_y = 0.03,   edgeWidths = 1:4 )"},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviNetwork — viviNetwork","text":"mat matrix, returned vivi, values plotted. intThreshold Remove edges weight value provided. intLims Specifies fit range color map interaction strength. impLims Specifies fit range color map importance. intPal vector colours show interactions, use scale_fill_gradientn. impPal vector colours show importance, use scale_fill_gradientn. removeNode TRUE, removes nodes connecting edges thresholding interaction values. layout igraph layout function numeric matrix two columns, one row per node. Defaults igraph::layout_as_circle cluster Either vector cluster memberships nodes igraph clustering function. nudge_x Nudge (centered) labels amount, outward horizontally. nudge_y Nudge (centered) labels amount, outward vertically. edgeWidths vector specifying scaling edges displayed graph. Values must positive.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviNetwork — viviNetwork","text":"plot displaying interaction strength variables edges variable importance nodes.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviNetwork — viviNetwork","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... viviNetwork(myMat) #> Error in require_namespaces(c(\"network\", \"sna\", \"scales\")): please install the package 'network'.  install.packages('network')  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"viviUpdate — viviUpdate","title":"viviUpdate — viviUpdate","text":"Creates matrix displaying updated variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviUpdate — viviUpdate","text":"","code":"viviUpdate(mat, newImp, reorder = TRUE)"},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviUpdate — viviUpdate","text":"mat matrix, returned vivi. newImp named vector variable importances. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviUpdate — viviUpdate","text":"matrix values, class vivid, updated variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviUpdate — viviUpdate","text":"","code":"f <- lm(Sepal.Length ~ ., data = iris[, -5]) m <- vivi(iris[, -5], f, \"Sepal.Length\") #> Agnostic variable importance method used. #> Calculating interactions... corimp <- abs(cor(iris[, -5])[1, -1]) viviUpdate(m, corimp) # use correlation as updated importance #>              Petal.Width Petal.Length Sepal.Width #> Petal.Width    0.8179411    0.0000000   0.0000000 #> Petal.Length   0.0000000    0.8717538   0.0000000 #> Sepal.Width    0.0000000    0.0000000   0.1175698 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":null,"dir":"Reference","previous_headings":"","what":"vividReorder — vividReorder","title":"vividReorder — vividReorder","text":"Reorders square matrix values high importance interaction strength pushed top left matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vividReorder — vividReorder","text":"","code":"vividReorder(d)"},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vividReorder — vividReorder","text":"d matrix returned vivi","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vividReorder — vividReorder","text":"reordered version d.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vividReorder — vividReorder","text":"","code":"f <- lm(Sepal.Length ~ ., data = iris[, -5]) m <- vivi(fit = f, data = iris[, -5], response = \"Sepal.Length\") #> Agnostic variable importance method used. #> Calculating interactions... corimp <- abs(cor(iris[, -5])[1, -1]) viviUpdate(m, corimp) # use correlation as importance and reorder #>              Petal.Width Petal.Length Sepal.Width #> Petal.Width    0.8179411    0.0000000   0.0000000 #> Petal.Length   0.0000000    0.8717538   0.0000000 #> Sepal.Width    0.0000000    0.0000000   0.1175698 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":null,"dir":"Reference","previous_headings":"","what":"zPath — zPath","title":"zPath — zPath","text":"Constructs zenpath connecting displaying pairs.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"zPath — zPath","text":"","code":"zPath(   viv,   cutoff = NULL,   method = c(\"greedy.weighted\", \"strictly.weighted\"),   connect = TRUE )"},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"zPath — zPath","text":"viv matrix, created vivi used calculate path. cutoff include variables cutoff interaction value. method String indicating method use. available methods : \"greedy.weighted\": Sort pairs according greedy (heuristic) Euler path x weights visiting edge precisely . \"strictly.weighted\": Strictly respect order weights - first, second, third, , adjacent pair numbers output zenpath() corresponds pair largest, second-largest, third-largest, , weight. see zenpath connect connect TRUE, connect edges separate eulerians (strictly.weighted ).","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"zPath — zPath","text":"Returns zpath viv showing pairs viv entry cutoff","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"zPath — zPath","text":"Construct path indices visit order variables","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"zPath — zPath","text":"","code":"if (FALSE) { # To use this function, install zenplots and graph from Bioconductor. if (!requireNamespace(\"graph\", quietly = TRUE)) {   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\")  aq <- na.omit(airquality) * 1.0  # Run an mlr3 ranger model: library(mlr3) library(mlr3learners) library(ranger) ozonet <- TaskRegr$new(id = \"airQ\", backend = aq, target = \"Ozone\") ozonel <- lrn(\"regr.ranger\", importance = \"permutation\") ozonef <- ozonel$train(ozonet)  viv <- vivi(aq, ozonef, \"Ozone\")  # Calculate Zpath: zpath <- zPath(viv, .8) zpath }"},{"path":"https://alaninglis.github.io/vivid/news/index.html","id":"vivid-028","dir":"Changelog","previous_headings":"","what":"vivid 0.2.8","title":"vivid 0.2.8","text":"CRAN release: 2023-07-10 Updated package work new version flashlight Updated vignette include examples using vivid different model types","code":""}]
