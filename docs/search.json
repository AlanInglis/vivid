[{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"vivid: Variable Importance and Variable Interaction Displays","text":"Variable importance (VImp), variable interaction measures (VInt) partial dependence plots (PDPs) important summaries interpretation statistical machine learning models. vignette describe new visualization techniques exploring model summaries. construct heatmap graph-based displays showing variable importance interaction jointly, carefully designed highlight important aspects fit. describe new matrix-type layout showing single bivariate partial dependence plots, alternative layout based graph Eulerians focusing key subsets. new visualisations model-agnostic applicable regression classification supervised learning settings. enhance interpretation even situations number variables large interaction structure complex. R package vivid (variable importance variable interaction displays) provides implementation. referring VImp VInt together, use shorthand VIVI. information related visualising variable importance interactions machine learning models see published work1.","code":""},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"install-instructions","dir":"Articles","previous_headings":"Introduction","what":"Install instructions","title":"vivid: Variable Importance and Variable Interaction Displays","text":"plots used vivid built upon zenplots package requires graph package BioConductor. install graph zenplots packages use: (!requireNamespace(\"graph\", quietly = TRUE)){ install.packages(\"BiocManager\") BiocManager::install(\"graph\")} install.packages(\"zenplots\") Now can install vivid using: install.packages(\"vivid\") Alternatively can install latest development version package R commands: (!require(remotes)) install.packages('remotes') remotes::install_github('AlanInglis/vividPackage') load required packages. vivid create visualizations packages create various model fits.","code":"library(vivid) # for visualisations  library(randomForest) # for model fit library(ranger)       # for model fit"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"data-used-in-this-vignette","dir":"Articles","previous_headings":"Section 1: Data and model fits","what":"Data used in this vignette:","title":"vivid: Variable Importance and Variable Interaction Displays","text":"data used following examples simulated Friedman benchmark problem2. benchmark problem commonly used testing purposes. output created according equation: following examples set number features equal 9 number samples set 350 fit randomForest random forest model \\(y\\) response. features \\(x_1\\) \\(x_5\\) variables model, therefore \\(x_6\\) \\(x_{9}\\) noise variables. can seen equation, interaction \\(x_1\\) \\(x_2\\) Create data:","code":"set.seed(101) genFriedman <- function(noFeatures = 10,                         noSamples = 100,                         sigma = 1 ) {   # Set Values   n <- noSamples # no of rows   p <- noFeatures # no of variables   e <- rnorm(n, sd = sigma)         # Create matrix of values   xValues <- matrix(runif(n * p, 0, 1), nrow = n) # Create matrix   colnames(xValues) <- paste0(\"x\", 1:p) # Name columns   df <- data.frame(xValues) # Create dataframe         # Equation:   # y = 10sin(πx1x2) + 20(x3−0.5)^2 + 10x4 + 5x5 + ε   y <- (10 * sin(pi * df$x1 * df$x2) + 20 * (df$x3 - 0.5)^2 + 10 * df$x4 + 5 *    df$x5 + e)   # Adding y to df   df$y <- y   df }  myData <- genFriedman(noFeatures = 9, noSamples = 350, sigma = 1)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"model-fit","dir":"Articles","previous_headings":"Section 1: Data and model fits","what":"Model fit","title":"vivid: Variable Importance and Variable Interaction Displays","text":"fit model. create random forest fit randomForest package.","code":"set.seed(1701) rf <- randomForest(y ~ ., data = myData)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"vivi-function","dir":"Articles","previous_headings":"Section 1: Data and model fits","what":"vivi function","title":"vivid: Variable Importance and Variable Interaction Displays","text":"utilize vivid, initial step involves computing variable importance interactions fitted model. vivi function performs calculation, producing square, symmetrical matrix contains variable importance diagonal variable interactions -diagonal. calculate pair-wise interaction strength interactions Friedman’s model agnostic, unnormalized \\(H\\)-Statistic3 used. unnormalized version \\(H\\)-statistic chosen direct comparison interaction effects across pairs variables results \\(H\\) scale response (regression). importance, either selected embedded importance measure can used (seen section 4) agnostic permutation method4 can selected. vivi function requires three inputs: fitted machine learning model, data frame used model’s training, name response variable fit. resulting matrix importance interaction values variables data frame, excluding response variable. default, embedded variable importance method available selected, agnostic permutation method applied. clarity, shown importanceType = 'agnostic' argument . example using embedded methods, see Section 4. variables used supplied model importance interaction values set zero. viviHeatmap viviNetwork visualization functions (seen ) tailored displaying results vivi calculations, can also work square matrix identical row column names. (Note, symmetry assumption required viviHeatmap viviNetwork uses interaction values lower-triangular part matrix .) function works multiple model fits results matrix can supplied plotting functions. predict function argument uses condvis2::CVpredict default, works many fit classes. see description function arguments use: ?vivid::vivi()","code":"set.seed(1701) viviRf  <- vivi(fit = rf,                  data = myData,                  response = \"y\",                 gridSize = 50,                 importanceType = \"agnostic\",                 nmax = 500,                 reorder = TRUE,                 predictFun = NULL,                 numPerm = 4,                 showVimpError = FALSE)"},{"path":[]},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"heatmap-plot","dir":"Articles","previous_headings":"Section 2: Visualizing the results","what":"Heatmap plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"viviHeatmap function generates heatmap displays variable importance interactions, importance values diagonal interaction values -diagonal. function requires vivid matrix input, need symmetrical. Additionally, color palettes can specified importance interactions via impPal intPal arguments. default, opted single-hue, color-blind friendly sequential color palettes developed Zeileis et al5. palettes represent low high VIVI values low high luminance colors, respectively, can aid highlighting pertinent values. impLims intLims arguments determine range importance interaction values assigned colors. arguments provided, default values calculated based minimum maximum VIVI values vivid matrix. importance interaction values fall outside specified limits, squished closest limit. brevity, required vivid matrix input shown following code. see description function arguments, see ?vivid::viviheatmap() Figure 1: Heatmap random forest fit displaying 2-way interaction strength diagonal individual variable importance diagonal. \\(x_1\\) \\(x_2\\) show strong interaction \\(x_4\\) important predicting \\(y\\).","code":"viviHeatmap(mat = viviRf)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"network-plot","dir":"Articles","previous_headings":"Section 2: Visualizing the results","what":"Network plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"viviNetwork, network graph produced visualize importance interactions. Similar viviHeatmap, function requires vivid matrix input uses visual elements, size color, depict magnitude importance interaction values. graph displays variable node, size color reflect importance (larger darker nodes indicate higher importance). Pairwise interactions displayed connecting edges, thicker darker edges indicate higher interaction values. begin show network using default settings. Figure 2: Network plot random forest fit displaying 2-way interaction strength individual variable importance. \\(x_1\\) \\(x_2\\) show strong interaction \\(x_4\\) important predicting \\(y\\). can also filter interactions set value using intThreshold argument. can useful number variables included model large just highlight strongest interactions. default, unconnected nodes displayed, however, can removed setting argument removeNode = T. Figure 3: Network plot random forest fit displaying 2-way interaction strength individual variable importance. () filtered network shown displaying interactions 0.12, nodes shown. (b) unconnected nodes removed. network plot offers multiple customization possibilities comes displaying network style plot use layout argument. default layout circle argument accepts igraph layout function numeric matrix two columns, one row per node. Figure 4: Network plot random forest fit using custom layout. Finally, network plot highlight relationships model fit, can cluster variables together using cluster argument. argument can either accept vector cluster memberships nodes igraph package clustering function. following example, manually select variables VIVI values top 20%. selection allows us focus variables impact response. variables remain \\(x1\\) \\(x5\\). perform hierarchical clustering treating variable interactions similarities, goal grouping together high-interaction variables. manually select number groups want show via cutree function (cuts clustered data desired number groups). Finally rearrange layout using igraph. , igraph::layout_as_star places first variable (deemed relevant using VIVI seriation process) center, Figure 5 emphasizes key role important predictor also strongest interactions. Figure 5: Clustered network plot random forest fit. Figure 5, applying hierarchical clustering, can see strongest mutual interactions grouped together. Namley; \\(x1\\), \\(x2\\), \\(x4\\). remaining variables individually clustered.","code":"viviNetwork(mat = viviRf) viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = FALSE) viviNetwork(mat = viviRf, intThreshold = 0.12, removeNode = TRUE) viviNetwork(mat = viviRf,              layout = cbind(c(1,1,1,1,2,2,2,2,2), c(1,2,4,5,1,2,3,4,5))) set.seed(1701) # clustered and filtered network for rf intVals <- viviRf diag(intVals) <- NA    # select VIVI values in top 20% impTresh <- quantile(diag(viviRf),.8) intThresh <- quantile(intVals,.8,na.rm=TRUE) sv <- which(diag(viviRf) > impTresh |               apply(intVals, 1, max, na.rm=TRUE) > intThresh)  h <- hclust(-as.dist(viviRf[sv,sv]), method=\"single\")  viviNetwork(viviRf[sv,sv],             cluster = cutree(h, k = 3), # specify number of groups             layout = igraph::layout_as_star)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"univariate-partial-dependence-plot","dir":"Articles","previous_headings":"Section 2: Visualizing the results","what":"Univariate Partial Dependence Plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"pdpVars function constructs grid univariate PDPs ICE curves selected variables. use ICE curves assist identification linear non-linear effects. fit, data frame used train model, name response variable required inputs. example , select first five variables created vivid matrix display set number ICE curves displayed 100, via nIce argument. Figure 6: Partial dependence plots (black line) individual conditional expectation curves (colored lines) random forest fit Friedman data. changing partial dependence ICE curves \\(x1\\), \\(x2\\), \\(x4\\) indicate variables impact response.","code":"top5 <- colnames(viviRf)[1:5] pdpVars(data = myData,         fit = rf,         response = 'y',         vars = top5,         nIce = 100)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"generalized-partial-dependence-pairs-plot","dir":"Articles","previous_headings":"Section 2: Visualizing the results","what":"Generalized partial dependence pairs plot","title":"vivid: Variable Importance and Variable Interaction Displays","text":"employing matrix layout, pdpPairs function generates generalized pairs partial dependence plot (GPDP) encompasses univariate partial dependence (ICE curves) diagonal, bivariate partial dependence upper diagonal, scatterplot raw variable values lower diagonal, colours assigned points ICE curves predicted \\(\\hat{y}\\) value. univariate PDP, fit, data frame used train model, name response variable required inputs. full description function arguments, see ?vivid::pdpPairs. following example, select first five variables display set number shown ICE curves 100. Figure 7: Filtered generalized pairs partial dependence plot random forest fit Friedman data. univariate bivariate PDPs, can see \\(x1\\), \\(x2\\), \\(x4\\) impact response.","code":"set.seed(1701) pdpPairs(data = myData,           fit =  rf,           response = \"y\",           nmax = 500,           gridSize = 10,                   vars = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"),          nIce = 100)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"partial-dependence-zenplot","dir":"Articles","previous_headings":"Section 2: Visualizing the results","what":"Partial dependence ‘Zenplot’","title":"vivid: Variable Importance and Variable Interaction Displays","text":"pdpZen function utilizes space-saving technique based graph Eulerians, introduced Hierholzer Wiener 18736 create partial dependence plots. refer plots zen-partial dependence plots (ZPDP). plots based zigzag expanded navigation plots, also known zenplots, available zenplots package7. Zenplots designed showcase paired graphs high-dimensional data focus significant 2D displays. version, display bivariate PDPs emphasize variables significant interaction values compact zigzag layout. format useful dealing high-dimensional predictor space. begin, show ZPDP using variables model. Figure 8: Zen partial dependence plot random forest fit Friedman data. display variables used random forest model. Fig 8, can see PDPs laid zigzag structure, influential variable pairs displayed top generally decreasing move . Figure 9, , select subset variables display. case select first five variables data. argument zpath specifies variables plotted, defaulting dataset variables aside response. Figure 9: Zen partial dependence plot random forest fit Friedman data. display first five variables. can also create sequence sequences variable paths use pdpZen. via zPath function. zPath function takes four arguments. : viv - matrix interaction values, cutoff - exclude interaction values threshold, method - string indicating method use create path, connect - logical value indicating separate Eulerians connected. can choose two methods using zPath function: \"greedy.weighted\" \"strictly.weighted\". first method utilizes greedy Eulerian path algorithm connected graphs. method traverses edge least , beginning highest-weighted edge, moving remaining edges prioritizing highest-weighted edge. graph odd number nodes, edges may visited , additional edges may visited. second method, \"strictly.weighted\" visits edges strictly decreasing order weight (case, interaction values). connect argument set TRUE, sequences generated strictly weighted method combined create single path. code , provide example creating zen-paths using \"strictly.weighted\" method, top 10% interaction scores viviRf (.e., created vivid matrix.) Figure 10: ZPDP random forest fit Friedman data. sorting method defined ’strictly.weighted‘ method un-connected.","code":"set.seed(1701) pdpZen(data = myData, fit = rf, response = \"y\", nmax = 500, gridSize = 10) set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")) # set zpaths with different parameters intVals <- viviRf diag(intVals) <- NA intThresh <- quantile(intVals, .90, na.rm=TRUE) zpSw <- zPath(viv = viviRf, cutoff = intThresh, connect = FALSE, method = 'strictly.weighted')    set.seed(1701) pdpZen(data = myData,         fit = rf,         response = \"y\",        nmax = 500,         gridSize = 10,         zpath = zpSw)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-3-example-using-the-predict-function","dir":"Articles","previous_headings":"","what":"Section 3: Example using the predict function","title":"vivid: Variable Importance and Variable Interaction Displays","text":"supply internal custom predict function called CVpredictfun importance interaction calculations. CVpredictfun wrapper around CVpredict condvis2 package8. CVpredict accepts broad range fit classes thus streamlining process calculating variable importance interactions. situations fit class handled CVpredict, supplying custom predict function vivi function way predictFun argument allows agnostic VIVI values calculated. following, provide small example using fit vivid using xgboost package create gradient boosting machine (GBM). begin build model. build vivid matrix GBM fit using custom predict function, must form given code snippet. can now create visualisations. brevity, show heatmap. Figure 11: Heatmap GBM fit Friedman data.","code":"library(\"xgboost\") gbst <- xgboost(data = as.matrix(myData[,1:9]),                 label =  as.matrix(myData[,10]),                 nrounds = 100,                 verbose = 0) # predict function for GBM pFun <- function(fit, data, ...) predict(fit, as.matrix(data[,1:9]))  set.seed(1701) viviGBst <- vivi(fit = gbst,                  data = myData,                  response = \"y\",                  reorder = FALSE,                  normalized = FALSE,                  predictFun = pFun,                  gridSize = 50,                  nmax = 500) viviHeatmap(mat = viviGBst)"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-4-using-different-importance-metrics","dir":"Articles","previous_headings":"","what":"Section 4: Using different importance metrics","title":"vivid: Variable Importance and Variable Interaction Displays","text":"following show examples select different (embedded) importance metrics use vivi function. illustrate process use random forest model fit using randomForest ranger packages. begin fit randomForest model. Note randomForest model, argument importance = TRUE, multiple importance metrics returned. case, regression random forest, returned importance metrics percent increase mean squared error (%IncMSE) increase node purity (IncNodePurity). order choose specific metric use vivid, necessary specify one importance metrics returned random forest argument importanceType parameter vivi function. code select %IncMSE importance metric. ranger random forest model, importance metric must specified fitting model. code , select impurity importance metric. calling vivi function, importanceType argument set selected importance metric.","code":"set.seed(1701) rfEmbedded <- randomForest(y ~ ., data = myData, importance = TRUE) viviRfEmbedded <- vivi(fit = rfEmbedded,                         data = myData,                         response = \"y\",                        importanceType = \"%IncMSE\") rang <- ranger(y~., data = myData, importance = 'impurity') viviRangEmbedded <- vivi(fit = rang,                           data = myData,                           response = \"y\",                          importanceType = \"impurity\")"},{"path":"https://alaninglis.github.io/vivid/articles/vividVignette.html","id":"section-5-classification-example","dir":"Articles","previous_headings":"","what":"Section 5: Classification example","title":"vivid: Variable Importance and Variable Interaction Displays","text":"section, briefly describe apply visualisations classification example using iris data set. begin fit ranger random forest model “Species” response create vivi matrix setting category classification “setosa” using class. Next plot heatmap network plot iris data. Figure 12: Heatmap () Network plot (b) random forest fit iris data mentioned , PDPs evaluated grid can extrapolate data. solve issue calculate convex hull around data remove points fall outside convex hull, shown . Figure 12: GPDP random forest fit iris data extrapolated data removed.","code":"set.seed(1701) rfClassif <- ranger(Species~ ., data = iris, probability = T,                      importance = \"impurity\")  set.seed(101) viviClassif  <- vivi(fit = rfClassif,                       data = iris,                       response = \"Species\",                      gridSize = 10,                      nmax = 50,                      reorder = TRUE,                      class = \"setosa\") viviHeatmap(mat = viviClassif) viviNetwork(mat = viviClassif) set.seed(1701) pdpPairs(data = iris,           fit = rfClassif,           response = \"Species\",          class = \"setosa\",            convexHull = T,           gridSize = 10,           nmax = 50)"},{"path":"https://alaninglis.github.io/vivid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alan Inglis. Author, maintainer. Andrew Parnell. Author. Catherine Hurley. Author.","code":""},{"path":"https://alaninglis.github.io/vivid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inglis, ., Parnell, ., Hurley, C. B. (2022). Visualizing Variable Importance Variable Interaction Effects Machine Learning Models. Journal Computational Graphical Statistics, 1-13.","code":"@Article{,   title = {Visualizing Variable Importance and Variable Interaction Effects in Machine Learning Models},   author = {Alan Inglis and Andrew Parnell and Catherine B. Hurley},   journal = {Journal of Computational and Graphical Statistics},   year = {2022},   pages = {1-13},   publisher = {Taylor & Francis}, }"},{"path":"https://alaninglis.github.io/vivid/index.html","id":"vivid","dir":"","previous_headings":"","what":"Variable Importance and Variable Interaction Displays","title":"Variable Importance and Variable Interaction Displays","text":"Variable importance, interaction measures partial dependence plots important summaries interpretation statistical machine learning models. R package vivid (variable importance variable interaction displays) create new visualisation techniques exploring model summaries. construct heatmap graph-based displays showing variable importance interaction jointly, carefully designed highlight important aspects fit. also construct new matrix-type layout showing single bivariate partial dependence plots, alternative layout based graph Eulerians focusing key subsets. new visualisations model-agnostic applicable regression classification supervised learning settings. enhance interpretation even situations number variables large interaction structure complex. practical example package use can found : https://alaninglis.github.io/vivid/articles/vividVignette.html","code":""},{"path":"https://alaninglis.github.io/vivid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Variable Importance and Variable Interaction Displays","text":"zenplots package (used within vivid) requires graph package BioConductor. install graph zenplots packages use: can install released version vivid CRAN : development version GitHub : can load package :","code":"if (!requireNamespace(\"graph\", quietly = TRUE)){   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\") install.packages(\"vivid\") # install.packages(\"devtools\") devtools::install_github(\"AlanInglis/vivid\") library(vivid)"},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":null,"dir":"Reference","previous_headings":"","what":"as.data.frame.vivid — as.data.frame.vivid","title":"as.data.frame.vivid — as.data.frame.vivid","text":"Takes matrix class vivid turn data frame containing variable names, Vimp Vint values, row column index original matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.data.frame.vivid — as.data.frame.vivid","text":"","code":"# S3 method for vivid as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.data.frame.vivid — as.data.frame.vivid","text":"x matrix class 'vivid' converted data frame. row.names NULL character vector giving row names data frame. Missing values allowed. optional Logical. TRUE, setting row names converting column names (syntactic names: see make.names) optional. Note R's base package .data.frame() methods use optional column names treatment, basically meaning data.frame(*, check.names = !optional). See also make.names argument matrix method. ... Additional arguments passed methods.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.data.frame.vivid — as.data.frame.vivid","text":"data frame Vimp Vint values index vivid matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/as.data.frame.vivid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.data.frame.vivid — as.data.frame.vivid","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) aq <- aq[1:20,]# for speed rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... myDf <- as.data.frame(myMat) myDf #>    Variable_1 Variable_2     Value Measure Row Col #> 1     Solar.R    Solar.R 2.9254551    Vimp   1   1 #> 2         Day    Solar.R 0.5431960    Vint   2   1 #> 3        Temp    Solar.R 0.3148131    Vint   3   1 #> 4        Wind    Solar.R 0.1386978    Vint   4   1 #> 5       Month    Solar.R 0.0000000    Vint   5   1 #> 6     Solar.R        Day 0.5431960    Vint   1   2 #> 7         Day        Day 2.4488418    Vimp   2   2 #> 8        Temp        Day 0.2128151    Vint   3   2 #> 9        Wind        Day 0.2952002    Vint   4   2 #> 10      Month        Day 0.0000000    Vint   5   2 #> 11    Solar.R       Temp 0.3148131    Vint   1   3 #> 12        Day       Temp 0.2128151    Vint   2   3 #> 13       Temp       Temp 1.1058326    Vimp   3   3 #> 14       Wind       Temp 0.1711936    Vint   4   3 #> 15      Month       Temp 0.0000000    Vint   5   3 #> 16    Solar.R       Wind 0.1386978    Vint   1   4 #> 17        Day       Wind 0.2952002    Vint   2   4 #> 18       Temp       Wind 0.1711936    Vint   3   4 #> 19       Wind       Wind 2.6974351    Vimp   4   4 #> 20      Month       Wind 0.0000000    Vint   5   4 #> 21    Solar.R      Month 0.0000000    Vint   1   5 #> 22        Day      Month 0.0000000    Vint   2   5 #> 23       Temp      Month 0.0000000    Vint   3   5 #> 24       Wind      Month 0.0000000    Vint   4   5 #> 25      Month      Month 0.0000000    Vimp   5   5 # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"pdpPairs — pdpPairs","title":"pdpPairs — pdpPairs","text":"Creates pairs plot showing bivariate pdp upper diagonal, ice/univariate pdp diagonal data lower diagonal","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pdpPairs — pdpPairs","text":"","code":"pdpPairs(   data,   fit,   response,   vars = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   fitlims = \"pdp\",   gridSize = 10,   nmax = 500,   class = 1,   nIce = 30,   colorVar = NULL,   comboImage = FALSE,   predictFun = NULL,   convexHull = FALSE,   probability = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pdpPairs — pdpPairs","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. vars variables plot (order), defaults variables response. pal vector colors show predictions, use scale_fill_gradientn fitlims Specifies fit range color map. Options numeric vector length 2, \"pdp\" (default), cases limits calculated pdp, \"\", limits calculated observations pdp. Predictions outside fitlims squished color scale. gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. nIce Number ice curves plotted, defaults 30. colorVar variable colour predictions . comboImage TRUE  draws pdp mixed variable plots image, otherwise interaction plot. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. convexHull TRUE, convex hull computed points outside convex hull removed. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pdpPairs — pdpPairs","text":"pairs plot","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pdpPairs — pdpPairs","text":"","code":"# Load in the data: aq <- na.omit(airquality) f <- lm(Ozone ~ ., data = aq) pdpPairs(aq, f, \"Ozone\") #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # \\donttest{ # Run a ranger model: library(ranger) library(MASS) Boston1 <- Boston[, c(4:6, 8, 13:14)] Boston1$chas <- factor(Boston1$chas) fit <- ranger(medv ~ ., data = Boston1, importance = \"permutation\") pdpPairs(Boston1[1:30, ], fit, \"medv\") #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  pdpPairs(Boston1[1:30, ], fit, \"medv\", comboImage = TRUE) #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  viv <- vivi(Boston1, fit, \"medv\") #> Agnostic variable importance method used. #> Calculating interactions... # show top variables only pdpPairs(Boston1[1:30, ], fit, \"medv\", comboImage = TRUE, vars = rownames(viv)[1:4]) #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # } # \\donttest{ library(ranger) rf <- ranger(Species ~ ., data = iris, probability = TRUE) pdpPairs(iris, rf, \"Species\") # prediction probs for first class, setosa #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  pdpPairs(iris, rf, \"Species\", class = \"versicolor\") # prediction probs versicolor #> Generating ice/pdp fits... waiting... #> Finished ice/pdp  # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":null,"dir":"Reference","previous_headings":"","what":"pdpVars — pdpVars","title":"pdpVars — pdpVars","text":"Displays individual conditional expectation (ICE) curves aggregated partial dependence variable grid.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pdpVars — pdpVars","text":"","code":"pdpVars(   data,   fit,   response,   vars = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   gridSize = 10,   nmax = 500,   class = 1,   nIce = 30,   predictFun = NULL,   limits = NULL,   colorVar = NULL,   draw = TRUE,   probability = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pdpVars — pdpVars","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. vars variables plot (order), defaults variables response. pal vector colors show predictions, use scale_fill_gradientn gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. nIce Number ice curves plotted, defaults 30. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. limits vector determining limits predicted values. colorVar variable colour predictions . draw FALSE, plot drawn. Default TRUE. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pdpVars — pdpVars","text":"grid displaying ICE curves univariate partial dependence.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pdpVars — pdpVars","text":"","code":"# \\donttest{ # Load in the data: aq <- na.omit(airquality) fit <- lm(Ozone ~ ., data = aq) pdpVars(aq, fit, \"Ozone\")   # Classification library(ranger) rfClassif <- ranger(Species ~ ., data = iris, probability = TRUE) pdpVars(iris, rfClassif, \"Species\", class = 3)   pp <- pdpVars(iris, rfClassif, \"Species\", class = 2, draw = FALSE) pp[[1]]  pdpVars(iris, rfClassif, \"Species\", class = 2, colorVar = \"Species\")  # }"},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a zenplot displaying partial dependence values. — pdpZen","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"Constructs zigzag expanded navigation plot (zenplot) displaying partial dependence values.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"","code":"pdpZen(   data,   fit,   response,   zpath = NULL,   pal = rev(RColorBrewer::brewer.pal(11, \"RdYlBu\")),   fitlims = \"pdp\",   gridSize = 10,   nmax = 500,   class = 1,   comboImage = FALSE,   rug = TRUE,   predictFun = NULL,   convexHull = FALSE,   probability = FALSE,   ... )"},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"data Data frame used fit fit supervised machine learning model, understands condvis2::CVpredict response name response fit zpath Plot shows consecutive pairs variables. Defaults variables response. Recommend constructing zpath witn calcZpath. pal vector colors show predictions, use scale_fill_gradientn fitlims Specifies fit range color map. Options numeric vector length 2, \"pdp\" (default), cases limits calculated pdp, \"\", limits calculated observations pdp predictions outside fitlims squished color scale. gridSize size grid evaluating predictions. nmax Uses sample nmax data rows pdp.  Default 500. Use rows NULL. class Category classification, factor level, number indicating factor level. comboImage TRUE  draws pdp mixed variable plots image, otherwise interaction plot. rug TRUE adds rugs data pdp plots predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. convexHull TRUE, convex hull computed points outside convex hull removed. probability TRUE, returns partial dependence classification probability scale. FALSE (default), partial dependence returned near logit scale. ... passed zenplot","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"zenplot partial dependence values.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/pdpZen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a zenplot displaying partial dependence values. — pdpZen","text":"","code":"if (FALSE) { # To use this function, install zenplots and graph from Bioconductor. if (!requireNamespace(\"graph\", quietly = TRUE)) {   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\")  library(MASS) library(ranger) Boston1 <- Boston Boston1$chas <- factor(Boston1$chas) rf <- ranger(medv ~ ., data = Boston1) pdpZen(Boston1[1:30, ], rf, response = \"medv\", zpath = names(Boston1)[1:4], comboImage = T) # Find the top variables in rf set.seed(123) viv <- vivi(Boston1, rf, \"medv\", nmax = 30) # use 30 rows, for speed pdpZen(Boston1, rf, response = \"medv\", zpath = rownames(viv)[1:4], comboImage = T) zpath <- zPath(viv, cutoff = .2) # find plots whose interaction score exceeds .2 pdpZen(Boston1, rf, response = \"medv\", zpath = zpath, comboImage = T) }"},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":null,"dir":"Reference","previous_headings":"","what":"vip2vivid — vip2vivid","title":"vip2vivid — vip2vivid","text":"Takes measured importance interactions vip package turns matrix can used plotting. Accepts variable importance methods supplied vip.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vip2vivid — vip2vivid","text":"","code":"vip2vivid(importance, interaction, reorder = TRUE)"},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vip2vivid — vip2vivid","text":"importance Measured importance vip package using vi function. interaction Measured interaction vip package using vint function. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vip2vivid — vip2vivid","text":"matrix interaction values, importance diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vip2vivid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vip2vivid — vip2vivid","text":"","code":"if (FALSE) { library(ranger) library(vip) aq <- na.omit(airquality) # get data nameAq <- names(aq[-1]) # get feature names  rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") # create ranger random forest fit vImp <- vi(rF) # vip importance vInt <- vint(rF, feature_names = nameAq) # vip interaction  vip2vivid(vImp, vInt) }"},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":null,"dir":"Reference","previous_headings":"","what":"vivi — vivi","title":"vivi — vivi","text":"Creates matrix displaying variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vivi — vivi","text":"","code":"vivi(   data,   fit,   response,   gridSize = 50,   importanceType = \"agnostic\",   nmax = 500,   reorder = TRUE,   class = 1,   predictFun = NULL,   normalized = FALSE,   numPerm = 4,   showVimpError = FALSE )"},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vivi — vivi","text":"data Data frame used fit. fit supervised machine learning model, understands condvis2::CVpredict response name response fit. gridSize size grid evaluating predictions. importanceType Used select importance metric. default, agnostic importance measure used. embedded metric available, setting argument importance metric use selected importance values vivid-matrix. Please refer examples given illustration. Alternatively, set equal \"agnostic\" (default) override embedded importance measures return agnostic importance values. nmax Maximum number data rows consider. Default 500. Use rows NULL. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances. class Category classification, factor level, number indicating factor level. predictFun Function (fit, data) extract numeric predictions fit. Uses condvis2::CVpredict default, works many fit classes. normalized Friedman's H-statistic normalized . Default FALSE. numPerm Number permutations preform. Default 4. showVimpError Logical. TRUE, numPerm > 1 tibble containing variable names, importance values, standard error importance printed console.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vivi — vivi","text":"matrix interaction values, importance diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vivi — vivi","text":"argument importanceType = 'agnostic', agnostic permutation importance (1) calculated. Friedman's H statistic (2) used measuring interactions. measure based partial dependence curves relates interaction strength pair variables total effect strength variable pair.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"vivi — vivi","text":"1: Fisher ., Rudin C., Dominici F. (2018). Models Wrong many Useful: Variable Importance Black-Box, Proprietary, Misspecified Prediction Models, using Model Class Reliance. Arxiv. 2: Friedman, J. H. Popescu, B. E. (2008). “Predictive learning via rule ensembles.” Annals Applied Statistics. JSTOR, 916–54.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vivi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vivi — vivi","text":"","code":"aq <- na.omit(airquality) f <- lm(Ozone ~ ., data = aq) m <- vivi(fit = f, data = aq, response = \"Ozone\") # as expected all interactions are zero #> Agnostic variable importance method used. #> Calculating interactions... viviHeatmap(m)   # Select importance metric library(randomForest) #> randomForest 4.7-1.1 #> Type rfNews() to see new features/changes/bug fixes. #>  #> Attaching package: ‘randomForest’ #> The following object is masked from ‘package:ranger’: #>  #>     importance rf1 <- randomForest(Ozone~., data = aq, importance = TRUE) m2 <- vivi(fit = rf1, data = aq, response = 'Ozone',            importanceType = '%IncMSE') # select %IncMSE as the importance measure #> %IncMSE importance selected. #> Calculating interactions... viviHeatmap(m2)   # \\donttest{ library(ranger) rf <- ranger(Species ~ ., data = iris, importance = \"impurity\", probability = TRUE) vivi(fit = rf, data = iris, response = \"Species\") # returns agnostic importance #> Agnostic variable importance method used. #> Calculating interactions... #>              Petal.Width Petal.Length Sepal.Length Sepal.Width #> Petal.Width    0.3199185     8.096256   7.72883962  5.50293057 #> Petal.Length   8.0962555     0.317892   7.74784704  5.56746915 #> Sepal.Length   7.7288396     7.747847   0.02727271  4.92049749 #> Sepal.Width    5.5029306     5.567469   4.92049749  0.01306665 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\"  vivi(fit = rf, data = iris, response = \"Species\",      importanceType = \"impurity\") # returns selected 'impurity' importance. #> Embedded impurity variable importance method used. #> Calculating interactions... #>              Petal.Width Petal.Length Sepal.Length Sepal.Width #> Petal.Width    44.366696     8.146517     7.592112    5.356899 #> Petal.Length    8.146517    41.019282     7.614735    5.365701 #> Sepal.Length    7.592112     7.614735     8.761284    4.231300 #> Sepal.Width     5.356899     5.365701     4.231300    1.438255 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\"  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"viviHeatmap — viviHeatmap","title":"viviHeatmap — viviHeatmap","text":"Plots Heatmap showing variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviHeatmap — viviHeatmap","text":"","code":"viviHeatmap(   mat,   intPal = rev(colorspace::sequential_hcl(palette = \"Purples 3\", n = 100)),   impPal = rev(colorspace::sequential_hcl(palette = \"Greens 3\", n = 100)),   intLims = NULL,   impLims = NULL,   border = FALSE,   angle = 0 )"},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviHeatmap — viviHeatmap","text":"mat matrix, returned vivi, values plotted. intPal vector colours show interactions, use scale_fill_gradientn. impPal vector colours show importance, use scale_fill_gradientn. intLims Specifies fit range color map interaction strength. impLims Specifies fit range color map importance. border Logical. TRUE draw black border around diagonal elements. angle angle rotate x-axis labels. Defaults zero.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviHeatmap — viviHeatmap","text":"heatmap plot showing variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviHeatmap — viviHeatmap","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... viviHeatmap(myMat)  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"viviNetwork — viviNetwork","title":"viviNetwork — viviNetwork","text":"Create Network plot displaying variable importance variable interaction.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviNetwork — viviNetwork","text":"","code":"viviNetwork(   mat,   intThreshold = NULL,   intLims = NULL,   impLims = NULL,   intPal = rev(colorspace::sequential_hcl(palette = \"Purples 3\", n = 100)),   impPal = rev(colorspace::sequential_hcl(palette = \"Greens 3\", n = 100)),   removeNode = FALSE,   layout = igraph::layout_in_circle,   cluster = NULL,   nudge_x = 0.05,   nudge_y = 0.03,   edgeWidths = 1:4 )"},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviNetwork — viviNetwork","text":"mat matrix, returned vivi, values plotted. intThreshold Remove edges weight value provided. intLims Specifies fit range color map interaction strength. impLims Specifies fit range color map importance. intPal vector colours show interactions, use scale_fill_gradientn. impPal vector colours show importance, use scale_fill_gradientn. removeNode TRUE, removes nodes connecting edges thresholding interaction values. layout igraph layout function numeric matrix two columns, one row per node. Defaults igraph::layout_as_circle cluster Either vector cluster memberships nodes igraph clustering function. nudge_x Nudge (centered) labels amount, outward horizontally. nudge_y Nudge (centered) labels amount, outward vertically. edgeWidths vector specifying scaling edges displayed graph. Values must positive.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviNetwork — viviNetwork","text":"plot displaying interaction strength variables edges variable importance nodes.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviNetwork — viviNetwork","text":"","code":"# \\donttest{ library(ranger) aq <- na.omit(airquality) rF <- ranger(Ozone ~ ., data = aq, importance = \"permutation\") myMat <- vivi(fit = rF, data = aq, response = \"Ozone\") #> Agnostic variable importance method used. #> Calculating interactions... viviNetwork(myMat)  # }"},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"viviUpdate — viviUpdate","title":"viviUpdate — viviUpdate","text":"Creates matrix displaying updated variable importance diagonal variable interaction -diagonal.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viviUpdate — viviUpdate","text":"","code":"viviUpdate(mat, newImp, reorder = TRUE)"},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viviUpdate — viviUpdate","text":"mat matrix, returned vivi. newImp named vector variable importances. reorder TRUE (default) uses DendSer reorder matrix interactions variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viviUpdate — viviUpdate","text":"matrix values, class vivid, updated variable importances.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/viviUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"viviUpdate — viviUpdate","text":"","code":"f <- lm(Sepal.Length ~ ., data = iris[, -5]) m <- vivi(iris[, -5], f, \"Sepal.Length\") #> Agnostic variable importance method used. #> Calculating interactions... corimp <- abs(cor(iris[, -5])[1, -1]) viviUpdate(m, corimp) # use correlation as updated importance #>              Petal.Width Petal.Length Sepal.Width #> Petal.Width    0.8179411    0.0000000   0.0000000 #> Petal.Length   0.0000000    0.8717538   0.0000000 #> Sepal.Width    0.0000000    0.0000000   0.1175698 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":null,"dir":"Reference","previous_headings":"","what":"vividReorder — vividReorder","title":"vividReorder — vividReorder","text":"Reorders square matrix values high importance interaction strength pushed top left matrix.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vividReorder — vividReorder","text":"","code":"vividReorder(d)"},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vividReorder — vividReorder","text":"d matrix returned vivi","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vividReorder — vividReorder","text":"reordered version d.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/vividReorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vividReorder — vividReorder","text":"","code":"f <- lm(Sepal.Length ~ ., data = iris[, -5]) m <- vivi(fit = f, data = iris[, -5], response = \"Sepal.Length\") #> Agnostic variable importance method used. #> Calculating interactions... corimp <- abs(cor(iris[, -5])[1, -1]) viviUpdate(m, corimp) # use correlation as importance and reorder #>              Petal.Width Petal.Length Sepal.Width #> Petal.Width    0.8179411    0.0000000   0.0000000 #> Petal.Length   0.0000000    0.8717538   0.0000000 #> Sepal.Width    0.0000000    0.0000000   0.1175698 #> attr(,\"class\") #> [1] \"vivid\"  \"matrix\" \"array\""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":null,"dir":"Reference","previous_headings":"","what":"zPath — zPath","title":"zPath — zPath","text":"Constructs zenpath connecting displaying pairs.","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"zPath — zPath","text":"","code":"zPath(   viv,   cutoff = NULL,   method = c(\"greedy.weighted\", \"strictly.weighted\"),   connect = TRUE )"},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"zPath — zPath","text":"viv matrix, created vivi used calculate path. cutoff include variables cutoff interaction value. method String indicating method use. available methods : \"greedy.weighted\": Sort pairs according greedy (heuristic) Euler path x weights visiting edge precisely . \"strictly.weighted\": Strictly respect order weights - first, second, third, , adjacent pair numbers output zenpath() corresponds pair largest, second-largest, third-largest, , weight. see zenpath connect connect TRUE, connect edges separate eulerians (strictly.weighted ).","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"zPath — zPath","text":"Returns zpath viv showing pairs viv entry cutoff","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"zPath — zPath","text":"Construct path indices visit order variables","code":""},{"path":"https://alaninglis.github.io/vivid/reference/zPath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"zPath — zPath","text":"","code":"if (FALSE) { # To use this function, install zenplots and graph from Bioconductor. if (!requireNamespace(\"graph\", quietly = TRUE)) {   install.packages(\"BiocManager\")   BiocManager::install(\"graph\") } install.packages(\"zenplots\")  aq <- na.omit(airquality) * 1.0  # Run an mlr3 ranger model: library(mlr3) library(mlr3learners) library(ranger) ozonet <- TaskRegr$new(id = \"airQ\", backend = aq, target = \"Ozone\") ozonel <- lrn(\"regr.ranger\", importance = \"permutation\") ozonef <- ozonel$train(ozonet)  viv <- vivi(aq, ozonef, \"Ozone\")  # Calculate Zpath: zpath <- zPath(viv, .8) zpath }"},{"path":"https://alaninglis.github.io/vivid/news/index.html","id":"vivid-026","dir":"Changelog","previous_headings":"","what":"vivid 0.2.6","title":"vivid 0.2.6","text":"CRAN release: 2023-04-05 Updated vivi description include references methods clarified importanceType argument. Changed drawing order clusters drawn behind nodes edges Heatmap network plots now work NAs. Added option select number permutations variable importance vivi function. Added new tests check plot vivi-matrix output.","code":""}]
